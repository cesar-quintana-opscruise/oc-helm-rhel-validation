apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.serviceAccountName }}
  namespace: {{ .Release.Namespace }}

---

{{- if and .Values.enablePersistent .Values.storageclassCreate }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ .Values.storageClass.name }}
provisioner: {{ .Values.storageClass.provisioner }}
reclaimPolicy: {{ .Values.storageClass.reclaimPolicy }}
allowVolumeExpansion: {{ .Values.storageClass.allowVolumeExpansion }}
volumeBindingMode: {{ .Values.storageClass.volumeBindingMode }}
{{- if .Values.storageClass.parameters }}
parameters:
{{- toYaml .Values.storageClass.parameters | nindent 2 }}
{{- end }}
{{- end }}
---

{{- if and .Values.enablePersistent .Values.pvCreate }}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.pv.name }}
  namespace: "{{ .Release.Namespace }}"
spec:
  claimRef:
    name: {{ .Values.pvc.name }}
    namespace: "{{ .Release.Namespace }}"
  persistentVolumeReclaimPolicy: {{ .Values.pv.persistentVolumeReclaimPolicy }}
  capacity:
    {{- toYaml .Values.pv.capacity | nindent 4 }}
  accessModes:
    - {{ .Values.pv.accessModes }}
  hostPath:
    {{- toYaml .Values.pv.hostPath | nindent 4 }}
  storageClassName: {{ .Values.storageClass.name }}
{{- end }}
---
{{- if .Values.enablePersistent }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{ .Values.pvc.name }}"
  namespace: "{{ .Release.Namespace }}"
spec:
  {{- if .Values.pvCreate }}
  volumeName: {{ .Values.pv.name }}
  {{- end }}
  accessModes:
   - {{ .Values.pvc.accessModes }}
  resources:
    {{- toYaml .Values.pvc.resources | nindent 4 }}
  storageClassName: {{ .Values.storageClass.name }}
{{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-prometheus
rules:
- apiGroups: [""]
  resources:
  - {{ .Values.rules.apiGroups.resources.nodes }}
  - {{ .Values.rules.apiGroups.resources.nodeOrProxy }}
  - {{ .Values.rules.apiGroups.resources.services }}
  - {{ .Values.rules.apiGroups.resources.endpoints }}
  - {{ .Values.rules.apiGroups.resources.pods }}
  verbs: ["get", "list", "watch"]
- apiGroups:
  - {{ .Values.rules.apiGroups.extensions }}
  resources:
  - {{ .Values.rules.apiGroups.resources.ingresses }}
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Name }}-prometheus
subjects:
- kind: ServiceAccount
  name: {{ .Values.serviceAccountName }}
  namespace: "{{ .Release.Namespace }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    opscruise-chart-version: {{ .Values.global.opscruiseChartVersion }}
    app: prometheus
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      name: prometheus
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/prometheus-configmap.yaml") . | sha256sum }}
      labels:
        app: prometheus
        {{- if .Values.labels }}
        {{- range $label, $val := .Values.labels }}
        {{ $label }}: {{ $val }}
        {{- end }}
        {{- end }}

      {{- if .Values.annotations }}
      annotations:
        {{- range $annotation, $val := .Values.annotations }}
        {{ $annotation }}: {{ $val }}
        {{- end }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- if eq .Values.enablePersistent true }}
      initContainers:
      {{- toYaml .Values.initContainer | nindent 8 }}
      {{- end }}
      containers:
      - name: prometheus
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        args:
          - "{{ .Values.args.logVar }}={{ .Values.logLevel }}"
          - "{{ .Values.args.configFile }}"
          - "{{ .Values.args.webListenAddress }}"
          - "{{ .Values.args.storageTsdbRetentionTime }}"
          - "{{ .Values.args.storageTsdbRetentionSize }}"
          {{- if eq .Values.enablePersistent true }}
          - "{{ .Values.args.storageTsdbPath }}"
          - "{{ .Values.args.webEnableLifecycle }}"
          - "{{ .Values.args.storageTsdbMinBlockDuration }}"
          - "{{ .Values.args.storageTsdbMaxBlockDuration }}"
          {{- end }}

        ports:
        - name: web
          containerPort: {{ .Values.ports.containerPort }}

        readinessProbe:
        {{- toYaml .Values.readinessProbe | nindent 10 }}

        livenessProbe:
        {{- toYaml .Values.livenessProbe | nindent 10 }}

        resources:
        {{- toYaml .Values.resources | nindent 10 }}

        volumeMounts:
        {{- toYaml .Values.volumeMounts | nindent 10 }}
        {{- if eq .Values.enablePersistent true }}
        {{- toYaml .Values.persistentVolumeMount | nindent 10 }}
        {{- end }}

      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}

      volumes:
      {{- toYaml .Values.volumes | nindent 8 }}
      {{- if eq .Values.enablePersistent true }}
      {{- toYaml .Values.persistentVolume | nindent 8 }}
      {{- end }}

      restartPolicy: "{{ .Values.restartPolicy }}"

      {{- if .Values.tolerations }}
      tolerations:
      {{- toYaml .Values.tolerations | nindent 6 }}
      {{- else if .Values.global.tolerations }}
      tolerations:
      {{- toYaml .Values.global.tolerations | nindent 6 }}
      {{- end }}

      {{- if .Values.affinity }}
      affinity:
      {{- toYaml .Values.affinity | nindent 8 }}
      {{- else if .Values.global.affinity }}
      affinity:
      {{- toYaml .Values.global.affinity | nindent 8 }}
      {{- end }}

      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
