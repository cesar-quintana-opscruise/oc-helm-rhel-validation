# Tags
tags:
    opscruise: true
    collectors: true
    
global:

    ## Indicates Helm Release version and annotated in each Opscruise deployment
    opscruiseChartVersion: "NOT_DEFINED"

    # flag to enable external standalone cadvisor and it will disable scraping the kubernetes inbuilt kubelet-cadvisor
    externalCadvisor: false

    ## Prometheus scrape_interval setting in seconds. This global setting can be overwritten by local setting ##
    prometheusScrapeInterval: 30
    
    ## Node-exporter Port Change. Default 9100. ##
    nodeExporterPort: 9100

    ## Kubernetes Cluster FQDN
    k8sClusterFqdn: "cluster.local"

    awsCredentials:
        regions:
        -   us-east-1
        aws_access_key_id: aws_access_key_id
        aws_secret_access_key: aws_secret_access_key

        roleArn: ""
        # gateway creds
    gatewayCreds:
        environment:
            DOCKER_SERVER: "https://index.docker.io/v1/"
            DOCKER_USERNAME: "<DOCKER_USERNAME>"
            DOCKER_PASSWORD: "<DOCKER_PASSWORD>"
            DOCKER_EMAIL: "<DOCKER_EMAIL>"
            OPSCRUISE_ENDPOINT: "<OPSCRUISE_BACKEND_KAFKA_ENDPOINT>:9093"
            KEYCLOAK_ENABLED: "true"
            KEYCLOAK_URL: "https://auth.opscruise.io:8443"
            KEYCLOAK_CLIENT_ID: "<KAFKA_CLIENT_ID>"
            KEYCLOAK_CLIENT_SECRET: "<KEYCLOAK_CLIENT_SECRET>"
            KEYCLOAK_REALM: "<KEYCLOAK_REALM>"
            OPSCRUISE_ACCOUNT_ID: "<KEYCLOAK_CLUSTERID>"

    hostAliases:
    # -   hostnames:
    #     -   qa-tesla-frontend.opscruise.io
    #     ip: 54.163.222.104
    # -   hostnames:
    #     -   qa-tesla-backend.opscruise.io
    #     ip: 107.21.198.219

    # Namespace filtering
    namespaceFiltering:
        namespaceAllowList:
        # - kube-system
        # - collectors
        # - opscruise

    tolerations:
    - key: opscruise
      effect: NoSchedule
      operator: Exists

    # Additional Tolerations to be applied on daemonset
    daemonsetTolerations:
    - key: node-role.kubernetes.io/master
      effect: NoSchedule
      operator: Exists

    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        -   preference:
                matchExpressions:
                -   key: monitoring
                    operator: In
                    values:
                    -   "true"
            weight: 1

##### Opscruise aws gateway #####
awsgw:
    enabled: false
    logLevel: "info"
    replicaCount: 1
    image:
        repository: opscruiseindia/oc-awsgw
        awsgw_tag: rel36.1.0
        pullPolicy: IfNotPresent

    envFrom:
        secretRefname1: oc-gw-creds
        secretRefname2: oc-aws-credential

    volumeMounts:
        -   name: awsgw-certs-volume
            mountPath: /var/opscruise/certs
        -   name: awsgw-config-volume
            mountPath: /var/opscruise/configmap

    volumes:
        -   name: awsgw-certs-volume
            secret:
                secretName: oc-gw-certs
        -   name: awsgw-config-volume
            configMap:
                name: awsgw-configmap

    imagePullSecrets:
        name: oc-docker-creds

    restartPolicy: Always

    resources:
        limits:
            cpu: 500m
            memory: 250Mi
        requests:
            cpu: 200m
            memory: 50Mi

    # serviceAccountName is for aws assume role
    serviceAccountName: awsgw-service-account

    labels: {}

    annotations: {}

    tolerations:

    priorityClassName: ""

    affinity: {}

    configMap:
        config:
            "aws":
                "log_aws_service_filter_objects": true
                "config_update_interval_sec": 300
                "service_ec2_enabled": true
                "service_ebs_enabled": true
                "service_elb_enabled": true
                "service_rds_enabled": true
                "service_s3_enabled": true
                "service_subnet_enabled": true
                "service_vpc_enabled": true
                "service_apigateway_enabled": true
                "service_lambda_enabled": true
                "service_appsync_enabled": true
                "service_kinesis_enabled": false
                "service_firehose_enabled": false
                "service_dynamodb_enabled": false
                "service_msk_enabled": true
            "aws_config":
                "aws_metric_config":
                    "application_elb_detailed_metrics_enabled": false
                    "default_range_seconds": 300
                    "default_sampling_seconds": 300
                    "ebs_detailed_metrics_enabled": false
                    "ec2_detailed_metrics_enabled": false
                    "elb_detailed_metrics_enabled": true
                    "network_elb_detailed_metrics_enabled": false
                    "lambda_detailed_metrics_enabled": false
                    "range_seconds": 60
                    "rds_detailed_metrics_enabled": true
                    "s3_detailed_metrics_enabled": false
                    "appsync_detailed_metrics_enabled": false
                    "sampling_seconds": 60
                    "s3_metric_delay_sec": 240
                "aws_filters":
                    tag_based_filter_enabled: false
                    global_tag_filtering:
                        enabled: true
                        global_filter_conditions: OR
                        tag_filters:
                        -   key: opscruise
                            value:
                            -   "true"
                    entities:
                        s3:
                            enabled: false
                            entity_filtering:
                                include_global_filter: true
                                entity_filter_condition: OR
                                tag_filters:
                                -   key: opscruise
                                    value:
                                    -   "true"
                        ec2:
                            enabled: false
                            entity_filtering:
                                include_global_filter: true
                                entity_filter_condition: OR
                                tag_filters:
                                -   key: opscruise
                                    value:
                                    -   "true"
                        apigateway:
                            enabled: false
                            entity_filtering:
                                include_global_filter: true
                                entity_filter_condition: OR
                                tag_filters:
                                -   key: opscruise
                                    value:
                                    -   "true"
                        appsync:
                            enabled: false
                            entity_filtering:
                                include_global_filter: true
                                entity_filter_condition: OR
                                tag_filters:
                                -   key: opscruise
                                    value:
                                    -   "true"
                        ebs:
                            enabled: false
                            entity_filtering:
                                include_global_filter: true
                                entity_filter_condition: OR
                                tag_filters:
                                -   key: opscruise
                                    value:
                                    -   "true"
                        elb:
                            enabled: false
                            entity_filtering:
                                include_global_filter: true
                                entity_filter_condition: OR
                                tag_filters:
                                -   key: opscruise
                                    value:
                                    -   "true"
                        lambda:
                            enabled: false
                            entity_filtering:
                                include_global_filter: true
                                entity_filter_condition: OR
                                tag_filters:
                                -   key: opscruise
                                    value:
                                    -   "true"
                        rds:
                            enabled: false
                            entity_filtering:
                                include_global_filter: true
                                entity_filter_condition: OR
                                tag_filters:
                                -   key: opscruise
                                    value:
                                    -   "true"
                        subnet:
                            enabled: false
                            entity_filtering:
                                include_global_filter: true
                                entity_filter_condition: OR
                                tag_filters:
                                -   key: opscruise
                                    value:
                                    -   "true"
                        vpc:
                            enabled: false
                            entity_filtering:
                                include_global_filter: true
                                entity_filter_condition: OR
                                tag_filters:
                                -   key: opscruise
                                    value:
                                    -   "true"
                        msk:
                            enabled: false
                            entity_filtering:
                                include_global_filter: true
                                entity_filter_condition: OR
                                tag_filters:
                                -   key: opscruise
                                    value:
                                    -   "true"
            "gateway_config":
                "OC_Gateway_Id": "AW-01"
                "OC_Heartbeat_Interval_sec": 60
                "OC_DataCompression": false
            "messaging":
                "kafka":
                    "consumer":
                        "net":
                            "sasl":
                                "enable": true
                                "insecure_skip_verify": true
                            "tls":
                                "enable": true
                                "insecure_skip_verify": true
                    "producer":
                        "number_of_producers": 1
                        "flush":
                            "bytes": 1572864
                            "frequency": 1000
                        "max_message_bytes": 20971520
                        "net":
                            "sasl":
                                "enable": true
                                "insecure_skip_verify": true
                            "tls":
                                "enable": true
                                "insecure_skip_verify": true
            "saf":
                "file_compress": true
                "max_file_size": 50
                "max_files": 10
                "store_path": "/var/opscruise/store"

##### Opscruise k8s gateway #####
k8sgw:
    enabled: true
    logLevel: "info"
    replicaCount: 1

    image:
        repository: opscruiseindia/oc-k8sgw
        k8sgw_tag: rel36.1.0
        pullPolicy: IfNotPresent

    envFrom:
        secretRef: oc-gw-creds

    volumeMounts:
        -   name: k8s-certs-volume
            mountPath: /var/opscruise/certs
        -   name: k8sgw-config-volume
            mountPath: /var/opscruise/configmap

    volumes:
        -   name: k8s-certs-volume
            secret:
                secretName: oc-gw-certs
        -   name: k8sgw-config-volume
            configMap:
                name: k8sgw-configmap

    imagePullSecrets:
        name: oc-docker-creds

    restartPolicy: Always

    resources:
        limits:
            cpu: 500m
            memory: 2000Mi
        requests:
            cpu: 200m
            memory: 200Mi

    # subjects:
        # name: default

    serviceAccountName: k8sgw-service-account
    service:
        app: k8sgw
        name: k8sgw-service
        opscruisePerimeter: opscruise
        opscruiseGroup: gateways
        opscruiseProduct: k8sGW
        opscruiseStream: opscruise
        protocol: TCP
        port: 8586
        targetPort: 8080

    labels: {}

    annotations: {}

    tolerations:

    priorityClassName: ""

    affinity: {}

    configMap: 
        config:
            "gateway_config":
                "OC_Gateway_Id": "K8-01"
                "OC_Heartbeat_Interval_sec": 60
                "OC_DataCompression": true
            "kubernetes":
                "all_config_interval_sec": 900
                "config_update_interval_sec": 60
                "event_update_interval_sec": 90
                "istio_enabled": false
                "namespace_allow_list": [NAMESPACE_K8sGW_FILTER]
                "listen_ip": "0.0.0.0"
                "listen_port": 8080
                "max_number_of_clients_active": 100
            "messaging":
                "kafka":
                    "consumer":
                        "net":
                            "sasl":
                                "enable": true
                                "insecure_skip_verify": true
                            "tls":
                                "enable": true
                                "insecure_skip_verify": true
                    "producer":
                        "number_of_producers": 1
                        "flush":
                            "bytes": 1572864
                            "frequency": 1000
                        "max_message_bytes": 20971520
                        "net":
                            "sasl":
                                "enable": true
                                "insecure_skip_verify": true
                            "tls":
                                "enable": true
                                "insecure_skip_verify": true
            "saf":
                "file_compress": true
                "max_file_size": 50
                "max_files": 10
                "store_path": "/var/opscruise/store"

##### Opscruise prometheus gateway #####
promgw:
    #enabled: true
    logLevel: "info"
    name: promgw-deployment
    app: promgw
    opscruisePerimeter: opscruise
    opscruiseGroup: gateways
    opscruiseProduct: promGW
    opscruiseStream: opscruise

    replicaCount: 1

    image:
        repository: opscruiseindia/oc-promgw
        promgw_tag: rel36.1.0
        pullPolicy: IfNotPresent
        containerPort: 8080

    envFrom:
        secretRefname: oc-gw-creds

    ports:
        containerPort: 8080
        # service target port should be same

    volumeMounts:
        -   name: promgw-certs-volume
            mountPath: /var/opscruise/certs
        -   name: promgw-config-volume
            mountPath: /var/opscruise/configmap

    volumes:
        -   name: promgw-certs-volume
            secret:
                secretName: oc-gw-certs
        -   name: promgw-config-volume
            configMap:
                name: promgw-configmap

    imagePullSecrets:
        name: oc-docker-creds

    restartPolicy: Always

    service:
        app: promgw
        name: promgw-service
        opscruisePerimeter: opscruise
        opscruiseGroup: gateways
        opscruiseProduct: promGW
        opscruiseStream: opscruise
        protocol: TCP
        port: 8585
        targetPort: 8080

    resources:
        limits:
            cpu: 500m
            memory: 300Mi
        requests:
            cpu: 200m
            memory: 50Mi

    serviceAccountName: promgw-service-account

    labels: {}

    annotations: {}

    tolerations:

    priorityClassName: ""

    affinity: {}

    configMap:
        config:
            "gateway_config":
                "OC_Gateway_Id": "PR-01"
                "OC_Heartbeat_Interval_sec": 60
            "messaging":
                "kafka":
                    "consumer":
                        "net":
                            "sasl":
                                "enable": true
                                "insecure_skip_verify": true
                            "tls":
                                "enable": true
                                "insecure_skip_verify": true
                    "producer":
                        "number_of_producers": 5
                        "flush":
                            "bytes": 1572864
                            "frequency": 1000
                        "max_message_bytes": 20971520
                        "net":
                            "sasl":
                                "enable": true
                                "insecure_skip_verify": true
                            "tls":
                                "enable": true
                                "insecure_skip_verify": true
            "prometheus":
                "listen_ip": "0.0.0.0"
                "listen_port": 8080
                "max_number_of_clients_active": 10
                "leader_idle_timeout": 60
                "non_leader_cache_timeout": 65
                "data_rate_fall_in_Percent": 90
                "period_of_data_rate_sec": 300
            "saf":
                "max_file_size": 50
                "max_files": 10
                "file_compress": true
                "store_path": "/var/opscruise/store"

##### Loggw #####
loggw-loki:
    #enabled: true
    replicaCount: 1
    image:
        repository: opscruiseindia/loggw-loki
        loggw_loki_tag: 0.36.100
        pullPolicy: IfNotPresent

    envFrom:
        configMapRef: loggw-loki-env-config
        secretRef: jgateway-secret

    volumeMounts:
        lokiParser:
            name: loggw-loki-parser-config
            mountPath: /opt/opscruise/cache/parser-config.json
            subPath: parser-config.json
        lokiCert:
            name: loggw-loki-cert
            mountPath: /etc/ssl/certs/loggw-cert.pem
            subPath: loggw-cert.pem

    imagePullSecrets:
        name: oc-docker-creds
    restartPolicy: Always

    secret:
        secretName: oc-gw-certs

    volumes:
        lokiParser:
            name: loggw-loki-parser-config
            configMap:
                name: loggw-loki-parser-config
        lokiCert:
            name: loggw-loki-cert
            secret:
                secretName: oc-gw-certs

    resources:
        limits:
            cpu: 500m
            memory: 1024Mi
        requests:
            cpu: 200m
            memory: 256Mi

    #env config yaml
    config:
        realm_path: /auth/realms/
        meta:
            name: loggw-loki-env-config
        oauthWithSsl: "true"
        oauthLoginEndpoint: "/protocol/openid-connect/token"
        oauthLoginGrantType: "client_credentials"
        oauthLoginScope: "openid"
        oauthIntrospectEndpoint: "/protocol/openid-connect/token/introspect"
        oauthAcceptUnsecureServer: "false"
        jgateway:
            lokiQueries: "%7Bnamespace%3D~%22.%2B%22%7D"
            cacheDir: "/opt/opscruise/cache"
            lokiHost: "opscruise-bundle-loki.opscruise.svc.K8S_CLUSTER_FQDN:3100"
            logLogParserConfigFilePath: "parser-config.json"
        loggw:
            lokiMaxLookBackMins: "10"
            lokiDelayForSecs: "3"
        quarkus:
            httpPort: "8083"
        gatewayName: "LOGGWLOKI"
        gatewayKind: "loggwloki"
        kafka:
            sasl: "true"
            saslJaasConfig: "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required ;"
            securityProtocol: "SASL_SSL"
            saslMechanism: "OAUTHBEARER"
            saslLoginCallbackHandlerClass: "com.opscruise.gateway.auth.OauthAuthenticateLoginCallbackHandler"
            sslVerify: "false"
    logLevel: "INFO"

    #Parser config
    parserConfig:
        meta:
            name: loggw-loki-parser-config
        file: parser-config.json

    serviceAccountName: loggw-service-account

    labels: {}

    annotations: {}

    tolerations:

    priorityClassName: ""

    affinity: {}

##### Azuregw #####
azuregw:
    enabled: false
    replicaCount: 1
    image:
        repository: opscruiseindia/oc-azuregw
        azuregw_tag: 0.36.100
        pullPolicy: IfNotPresent

    envFrom:
        configMapRef: azuregw-env-config
        secretJgatewayRef: jgateway-secret
        credsAzureRef: azure-creds

    volumeMounts:
        azureConfig:
            name: azuregw-config
            mountPath: /opt/opscruise/configs/azureGatewayConfig.json
            subPath: azureGatewayConfig.json
        azureCert:
            name: azuregw-cert
            mountPath: /etc/ssl/certs/azuregw-cert.pem
            subPath: azuregw-cert.pem


    imagePullSecrets:
        name: oc-docker-creds

    restartPolicy: Always

    secret:
        secretName: oc-gw-certs

    volumes:
        azureConfig:
            name: azuregw-config
            configMap:
                name: azuregw-config
        azureCert:
            name: azuregw-cert
            secret:
                secretName: oc-gw-certs

    resources:
        limits:
            cpu: 500m
            memory: 1024Mi
        requests:
            cpu: 200m
            memory: 256Mi

    #env config yaml
    config:
        meta:
            name: azuregw-env-config
        oauthWithSsl: "true"
        oauthLoginEndpoint: "/protocol/openid-connect/token"
        oauthLoginGrantType: "client_credentials"
        oauthLoginScope: "openid"
        oauthIntrospectEndpoint: "/protocol/openid-connect/token/introspect"
        oauthAcceptUnsecureServer: "false"
        kafka:
            sasl: "true"
            saslJaasConfig: "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required ;"
            securityProtocol: "SASL_SSL"
            saslMechanism: "OAUTHBEARER"
            saslLoginCallbackHandlerClass: "com.opscruise.gateway.auth.OauthAuthenticateLoginCallbackHandler"
            sslVerify: "false"
        azure:
            authLocation: "/opt/opscruise/configs/azureauth.txt"
            azureGatewayJson: "/opt/opscruise/configs/azureGatewayConfig.json"
        quarkus:
            httpPort: "8093"
        gatewayName: "AZUREGW"
        gatewayKind: "azure"
    logLevel: "INFO"

    azureCredentials:
    -   azureauth_clientId: azureauth_clientId
        azureauth_tenantId: azureauth_tenantId
        azureauth_clientSecret: azureauth_clientSecret
        name: "credential_name"

    configMap:
        config:
            "pollIntervalsSeconds":
                "resourceEngine": 30
                "configEngine": 600
                "metricEngine": 30
                "eventEngine": 30
            "resourceSettings":
                "microsoft.compute/virtualmachines":
                    "metricTypes":
                        -   "Percentage CPU"
                        -   "Disk Read Bytes"
                        -   "Disk Write Bytes"
                        -   "Disk Read Operations/Sec"
                        -   "Disk Write Operations/Sec"
                        -   "Data Disk Read Bytes/Sec"
                        -   "Data Disk Write Bytes/Sec"
                        -   "Data Disk Read Operations/Sec"
                        -   "Data Disk Write Operations/Sec"
                        -   "Data Disk Queue Depth"
                        -   "OS Disk Read Bytes/Sec"
                        -   "OS Disk Write Bytes/Sec"
                        -   "OS Disk Read Operations/Sec"
                        -   "OS Disk Write Operations/Sec"
                        -   "OS Disk Queue Depth"
                        -   "Inbound Flows"
                        -   "Outbound Flows"
                        -   "Inbound Flows Maximum Creation Rate"
                        -   "Outbound Flows Maximum Creation Rate"
                        -   "Network In Total"
                        -   "Network Out Total"
                    "timeGrain": "PT5M"
                "microsoft.network/loadbalancers" :
                    "metricTypes" :
                        -   "VipAvailability"
                        -   "DipAvailability"
                        -   "ByteCount"
                        -   "PacketCount"
                        -   "SYNCount"
                        -   "SnatConnectionCount"
                        -   "AllocatedSnatPorts"
                        -   "UsedSnatPorts"
                    "timeGrain": "PT5M"
                "microsoft.network/applicationgateways" :
                    "metricTypes" :
                        -   "Throughput"
                        -   "UnhealthyHostCount"
                        -   "HealthyHostCount"
                        -   "TotalRequests"
                        -   "AvgRequestCountPerHealthyHost"
                        -   "FailedRequests"
                        -   "ResponseStatus"
                        -   "CurrentConnections"
                        -   "CpuUtilization"
                    "timeGrain": "PT5M"
                "microsoft.compute/disks" :
                    "metricTypes" :
                        -   "Composite Disk Read Bytes/sec"
                        -   "Composite Disk Read Operations/sec"
                        -   "Composite Disk Write Bytes/sec"
                        -   "Composite Disk Write Operations/sec"
                    "timeGrain": "PT5M"
                "microsoft.documentdb/databaseaccounts":
                    "metricTypes":
                        -   "CreateAccount"
                        -   "CassandraKeyspaceUpdate"
                        -   "GremlinGraphDelete"
                        -   "CassandraTableCreate"
                        -   "MetadataRequests"
                        -   "DataUsage"
                        -   "IndexUsage"
                        -   "GremlinDatabaseCreate"
                        -   "GremlinGraphUpdate"
                        -   "CassandraTableDelete"
                        -   "CassandraConnectorAvgReplicationLatency"
                        -   "CassandraRequestCharges"
                        -   "CassandraRequests"
                        -   "DeleteAccount"
                        -   "GremlinDatabaseDelete"
                        -   "MongoDBDatabaseUpdate"
                        -   "MongoDatabaseDelete"
                        -   "MongoDatabaseThroughputUpdate"
                        -   "MongoRequests"
                        -   "MongoRequestsDelete"
                        -   "MongoRequestsInsert"
                        -   "MongoRequestsQuery"
                        -   "MongoRequestsUpdate"
                        -   "ServerSideLatency"
                        -   "SqlContainerThroughputUpdate"
                        -   "SqlDatabaseCreate"
                        -   "SqlDatabaseThroughputUpdate"
                        -   "TableTableCreate"
                        -   "UpdateAccountKeys"
                        -   "TotalRequests"
                        -   "IntegratedCacheSize"
                        -   "IntegratedCacheEvictedEntriesSize"
                        -   "DedicatedGatewayRequests"
                        -   "CassandraConnectionClosures"
                        -   "DocumentQuota"
                        -   "AvailableStorage"
                        -   "DocumentCount"
                        -   "CassandraKeyspaceDelete"
                        -   "GremlinGraphCreate"
                        -   "MongoCollectionDelete"
                        -   "MongoCollectionUpdate"
                        -   "MongoDBDatabaseCreate"
                        -   "MongoRequestsCount"
                        -   "NormalizedRUConsumption"
                        -   "RemoveRegion"
                        -   "ServiceAvailability"
                        -   "SqlContainerCreate"
                        -   "SqlContainerDelete"
                        -   "SqlContainerUpdate"
                        -   "TableTableDelete"
                        -   "TotalRequestUnits"
                        -   "UpdateAccountReplicationSettings"
                        -   "GremlinDatabaseThroughputUpdate"
                        -   "AutoscaleMaxThroughput"
                        -   "CassandraKeyspaceCreate"
                        -   "AddRegion"
                        -   "CassandraTableUpdate"
                        -   "CassandraConnectorReplicationHealthStatus"
                        -   "GremlinDatabaseUpdate"
                        -   "MongoCollectionCreate"
                        -   "CassandraKeyspaceThroughputUpdate"
                        -   "CassandraTableThroughputUpdate"
                        -   "GremlinGraphThroughputUpdate"
                        -   "MongoCollectionThroughputUpdate"
                        -   "MongoRequestCharge"
                        -   "ProvisionedThroughput"
                        -   "RegionFailover"
                        -   "ReplicationLatency"
                        -   "SqlDatabaseDelete"
                        -   "SqlDatabaseUpdate"
                        -   "TableTableThroughputUpdate"
                        -   "TableTableUpdate"
                        -   "UpdateAccountNetworkSettings"
                        -   "UpdateDiagnosticsSettings"
                        -   "IntegratedCacheHitRate"
                        -   "IntegratedCacheTTLExpirationCount"
                    "timeGrain": "PT5M"
                "microsoft.cache/redis" :
                    "metricTypes" :
                        -   "connectedclients"
                        -   "totalcommandsprocessed"
                        -   "cachehits"
                        -   "cachemisses"
                        -   "cachemissrate"
                        -   "getcommands"
                        -   "setcommands"
                        -   "operationsPerSecond"
                        -   "evictedkeys"
                        -   "totalkeys"
                        -   "expiredkeys"
                        -   "usedmemory"
                        -   "usedmemorypercentage"
                        -   "usedmemoryRss"
                        -   "serverLoad"
                        -   "cacheWrite"
                        -   "cacheRead"
                        -   "allconnectedclients"
                        -   "alltotalcommandsprocessed"
                        -   "allcachehits"
                        -   "allcachemisses"
                        -   "allgetcommands"
                        -   "allsetcommands"
                        -   "alloperationsPerSecond"
                        -   "allevictedkeys"
                        -   "alltotalkeys"
                        -   "allexpiredkeys"
                        -   "allusedmemory"
                        -   "allusedmemorypercentage"
                        -   "allusedmemoryRss"
                        -   "allserverLoad"
                        -   "allcacheWrite"
                        -   "allcacheRead"
                        -   "percentProcessorTime"
                        -   "cacheLatency"
                        -   "errors"
                        -   "connectedclients0"
                        -   "totalcommandsprocessed0"
                        -   "cachehits0"
                        -   "cachemisses0"
                        -   "getcommands0"
                        -   "setcommands0"
                        -   "operationsPerSecond0"
                        -   "evictedkeys0"
                        -   "totalkeys0"
                        -   "expiredkeys0"
                        -   "usedmemory0"
                        -   "usedmemoryRss0"
                        -   "serverLoad0"
                        -   "cacheWrite0"
                        -   "cacheRead0"
                        -   "percentProcessorTime0"
                        -   "connectedclients1"
                        -   "totalcommandsprocessed1"
                        -   "cachehits1"
                        -   "cachemisses1"
                        -   "getcommands1"
                        -   "setcommands1"
                        -   "operationsPerSecond1"
                        -   "evictedkeys1"
                        -   "totalkeys1"
                        -   "expiredkeys1"
                        -   "usedmemory1"
                        -   "usedmemoryRss1"
                        -   "serverLoad1"
                        -   "cacheWrite1"
                        -   "cacheRead1"
                        -   "percentProcessorTime1"
                        -   "connectedclients2"
                        -   "totalcommandsprocessed2"
                        -   "cachehits2"
                        -   "cachemisses2"
                        -   "getcommands2"
                        -   "setcommands2"
                        -   "operationsPerSecond2"
                        -   "evictedkeys2"
                        -   "totalkeys2"
                        -   "expiredkeys2"
                        -   "usedmemory2"
                        -   "usedmemoryRss2"
                        -   "serverLoad2"
                        -   "cacheWrite2"
                        -   "cacheRead2"
                        -   "percentProcessorTime2"
                        -   "connectedclients3"
                        -   "totalcommandsprocessed3"
                        -   "cachehits3"
                        -   "cachemisses3"
                        -   "getcommands3"
                        -   "setcommands3"
                        -   "operationsPerSecond3"
                        -   "evictedkeys3"
                        -   "totalkeys3"
                        -   "expiredkeys3"
                        -   "usedmemory3"
                        -   "usedmemoryRss3"
                        -   "serverLoad3"
                        -   "cacheWrite3"
                        -   "cacheRead3"
                        -   "percentProcessorTime3"
                        -   "connectedclients4"
                        -   "totalcommandsprocessed4"
                        -   "cachehits4"
                        -   "cachemisses4"
                        -   "getcommands4"
                        -   "setcommands4"
                        -   "operationsPerSecond4"
                        -   "evictedkeys4"
                        -   "totalkeys4"
                        -   "expiredkeys4"
                        -   "usedmemory4"
                        -   "usedmemoryRss4"
                        -   "serverLoad4"
                        -   "cacheWrite4"
                        -   "cacheRead4"
                        -   "percentProcessorTime4"
                        -   "connectedclients5"
                        -   "totalcommandsprocessed5"
                        -   "cachehits5"
                        -   "cachemisses5"
                        -   "getcommands5"
                        -   "setcommands5"
                        -   "operationsPerSecond5"
                        -   "evictedkeys5"
                        -   "totalkeys5"
                        -   "expiredkeys5"
                        -   "usedmemory5"
                        -   "usedmemoryRss5"
                        -   "serverLoad5"
                        -   "cacheWrite5"
                        -   "cacheRead5"
                        -   "percentProcessorTime5"
                        -   "connectedclients6"
                        -   "totalcommandsprocessed6"
                        -   "cachehits6"
                        -   "cachemisses6"
                        -   "getcommands6"
                        -   "setcommands6"
                        -   "operationsPerSecond6"
                        -   "evictedkeys6"
                        -   "totalkeys6"
                        -   "expiredkeys6"
                        -   "usedmemory6"
                        -   "usedmemoryRss6"
                        -   "serverLoad6"
                        -   "cacheWrite6"
                        -   "cacheRead6"
                        -   "percentProcessorTime6"
                        -   "connectedclients7"
                        -   "totalcommandsprocessed7"
                        -   "cachehits7"
                        -   "cachemisses7"
                        -   "getcommands7"
                        -   "setcommands7"
                        -   "operationsPerSecond7"
                        -   "evictedkeys7"
                        -   "totalkeys7"
                        -   "expiredkeys7"
                        -   "usedmemory7"
                        -   "usedmemoryRss7"
                        -   "serverLoad7"
                        -   "cacheWrite7"
                        -   "cacheRead7"
                        -   "percentProcessorTime7"
                        -   "connectedclients8"
                        -   "totalcommandsprocessed8"
                        -   "cachehits8"
                        -   "cachemisses8"
                        -   "getcommands8"
                        -   "setcommands8"
                        -   "operationsPerSecond8"
                        -   "evictedkeys8"
                        -   "totalkeys8"
                        -   "expiredkeys8"
                        -   "usedmemory8"
                        -   "usedmemoryRss8"
                        -   "serverLoad8"
                        -   "cacheWrite8"
                        -   "cacheRead8"
                        -   "percentProcessorTime8"
                        -   "connectedclients9"
                        -   "totalcommandsprocessed9"
                        -   "cachehits9"
                        -   "cachemisses9"
                        -   "getcommands9"
                        -   "setcommands9"
                        -   "operationsPerSecond9"
                        -   "evictedkeys9"
                        -   "totalkeys9"
                        -   "expiredkeys9"
                        -   "usedmemory9"
                        -   "usedmemoryRss9"
                        -   "serverLoad9"
                        -   "cacheWrite9"
                        -   "cacheRead9"
                        -   "percentProcessorTime9"
                        -   "allConnectionsCreatedPerSecond"
                        -   "allConnectionsClosedPerSecond"
                    "timeGrain" : "PT5M"
                "microsoft.dbforpostgresql/flexibleservers":
                    "metricTypes":
                        -   "Backup Storage Used"
                        -   "CPU Credits Consumed"
                        -   "CPU Credits Remaining"
                        -   "CPU percent"
                        -   "Memory percent"
                        -   "IOPS"
                        -   "Disk Queue Depth"
                        -   "Read Throughput Bytes/Sec"
                        -   "Write Throughput Bytes/Sec"
                        -   "Read IOPS"
                        -   "Write IOPS"
                        -   "Storage percent"
                        -   "Storage used"
                        -   "Storage Free"
                        -   "Transaction Log Storage Used"
                        -   "Active Connections"
                        -   "Network Out"
                        -   "Network In"
                        -   "Failed Connections"
                        -   "Succeeded Connections"
                        -   "Maximum Used Transaction IDs"
                    "timeGrain": "PT5M"
                "microsoft.dbforpostgresql/servers":
                    "metricTypes":
                        -   "active_connections"
                        -   "backup_storage_used"
                        -   "connections_failed"
                        -   "cpu_percent"
                        -   "memory_percent"
                        -   "network_bytes_egress"
                        -   "network_bytes_ingress"
                        -   "storage_percent"
                        -   "storage_used"
                        -   "serverlog_storage_limit"
                        -   "serverlog_storage_percent"
                        -   "serverlog_storage_usage"
                        -   "storage_limit"
                        -   "io_consumption_percent"
                        -   "pg_replica_log_delay_in_bytes"
                        -   "pg_replica_log_delay_in_seconds"
                    "timeGrain": "PT5M"
                "microsoft.sql/servers":
                    "metricTypes":
                        -   "DTU percentage"
                        -   "DTU used"
                        -   "Data space used"
                    "timeGrain": "PT5M"
                "microsoft.sql/servers/databases":
                    "metricTypes":
                        -   "CPU percentage"
                        -   "Data IO percentage"
                        -   "Log IO percentage"
                        -   "Data space used"
                        -   "Successful Connections"
                        -   "Failed Connections"
                        -   "Blocked by Firewall"
                        -   "Deadlocks"
                        -   "Data space used percent"
                        -   "In-Memory OLTP storage percent"
                        -   "Workers percentage"
                        -   "Sessions percentage"
                        -   "SQL Server process core percent"
                        -   "SQL Server process memory percent"
                        -   "Tempdb Data File Size Kilobytes"
                        -   "Tempdb Log File Size Kilobytes"
                        -   "Tempdb Percent Log Used"
                        -   "Data space allocated"
                    "timeGrain": "PT5M"
                "microsoft.apimanagement/service":
                    "metricTypes":
                        -   "Total Gateway Requests"
                        -   "Successful Gateway Requests"
                        -   "Unauthorized Gateway Requests"
                        -   "Failed Gateway Requests"
                        -   "Other Gateway Requests"
                        -   "Overall Duration of Gateway Requests"
                        -   "Duration of Backend Requests"
                        -   "Capacity"
                        -   "Total EventHub Events"
                        -   "Successful EventHub Events"
                        -   "Failed EventHub Events"
                        -   "Rejected EventHub Events"
                        -   "Throttled EventHub Events"
                        -   "Timed Out EventHub Events"
                        -   "Dropped EventHub Events"
                        -   "Size of EventHub Events"
                        -   "Requests"
                        -   "Network Connectivity Status of Resources"
                        -   "WebSocket Messages"
                        -   "WebSocket Connection Attempts"
                    "timeGrain": "PT5M"
                "microsoft.compute/virtualmachinescalesets/virtualmachines" :
                    "metricTypes" :
                        -   "Percentage CPU"
                        -   "Disk Read Bytes"
                        -   "Disk Write Bytes"
                        -   "Disk Read Operations/Sec"
                        -   "Disk Write Operations/Sec"
                        -   "Data Disk Read Bytes/Sec"
                        -   "Data Disk Write Bytes/Sec"
                        -   "Data Disk Read Operations/Sec"
                        -   "Data Disk Write Operations/Sec"
                        -   "Data Disk Queue Depth"
                        -   "OS Disk Read Bytes/Sec"
                        -   "OS Disk Write Bytes/Sec"
                        -   "OS Disk Read Operations/Sec"
                        -   "OS Disk Write Operations/Sec"
                        -   "OS Disk Queue Depth"
                        -   "Inbound Flows"
                        -   "Outbound Flows"
                        -   "Inbound Flows Maximum Creation Rate"
                        -   "Outbound Flows Maximum Creation Rate"
                        -   "Network In Total"
                        -   "Network Out Total"
                    "timeGrain": "PT5M"
                "microsoft.dbformysql/servers" :
                    "metricTypes":
                        -   "active_connections"
                        -   "backup_storage_used"
                        -   "connections_failed"
                        -   "cpu_percent"
                        -   "io_consumption_percent"
                        -   "memory_percent"
                        -   "network_bytes_egress"
                        -   "network_bytes_ingress"
                        -   "seconds_behind_master"
                        -   "serverlog_storage_limit"
                        -   "serverlog_storage_percent"
                        -   "serverlog_storage_usage"
                        -   "storage_limit"
                        -   "storage_percent"
                        -   "storage_used"
                    "timeGrain": "PT5M"
                "microsoft.dbformysql/flexibleservers" :
                    "metricTypes":
                        -   "aborted_connections"
                        -   "active_connections"
                        -   "backup_storage_used"
                        -   "cpu_credits_consumed"
                        -   "cpu_credits_remaining"
                        -   "cpu_percent"
                        -   "io_consumption_percent"
                        -   "memory_percent"
                        -   "network_bytes_egress"
                        -   "network_bytes_ingress"
                        -   "Queries"
                        -   "replication_lag"
                        -   "storage_limit"
                        -   "storage_percent"
                        -   "storage_used"
                        -   "total_connections"
                    "timeGrain": "PT5M"
                "microsoft.storage/storageaccounts":
                    "metricTypes":
                        -   "Availability"
                        -   "Egress"
                        -   "Ingress"
                        -   "SuccessE2ELatency"
                        -   "SuccessServerLatency"
                        -   "Transactions"
                        -   "UsedCapacity"
                        -   "BlobCapacity"
                        -   "BlobCount"
                        -   "ContainerCount"
                        -   "IndexCapacity"
                        -   "FileCapacity"
                        -   "FileCount"
                        -   "FileShareCount"
                        -   "FileShareCapacityQuota"
                        -   "FileShareSnapshotCount"
                        -   "FileShareSnapshotSize"
                        -   "QueueCapacity"
                        -   "QueueCount"
                        -   "QueueMessageCount"
                        -   "TableCapacity"
                        -   "TableCount"
                        -   "TableEntityCount"
                    "timeGrain": "PT5M"
                "microsoft.network/publicipaddresses":
                    "metricTypes":
                        -   "ByteCount"
                        -   "BytesDroppedDDoS"
                        -   "BytesForwardedDDoS"
                        -   "BytesInDDoS"
                        -   "DDoSTriggerSYNPackets"
                        -   "DDoSTriggerTCPPackets"
                        -   "DDoSTriggerUDPPackets"
                        -   "IfUnderDDoSAttack"
                        -   "PacketCount"
                        -   "PacketsDroppedDDoS"
                        -   "PacketsForwardedDDoS"
                        -   "PacketsInDDoS"
                        -   "SynCount"
                        -   "TCPBytesDroppedDDoS"
                        -   "TCPBytesForwardedDDoS"
                        -   "TCPBytesInDDoS"
                        -   "TCPPacketsDroppedDDoS"
                        -   "TCPPacketsForwardedDDoS"
                        -   "TCPPacketsInDDoS"
                        -   "UDPBytesDroppedDDoS"
                        -   "UDPBytesForwardedDDoS"
                        -   "UDPBytesInDDoS"
                        -   "UDPPacketsDroppedDDoS"
                        -   "UDPPacketsForwardedDDoS"
                        -   "UDPPacketsInDDoS"
                        -   "VipAvailability"
                    "timeGrain": "PT5M"
            
            "serviceTag" : "OpsCruise"
            "configsTag" : "OpsCruise_Configs"
            "metricsTag" : "OpsCruise_Metrics"
            "eventsTag" : "OpsCruise_Events"
            "enabledValue" : "Enabled"
            "filteringEnabled": false

    serviceAccountName: azuregw-service-account

    labels: {}

    annotations: {}

    tolerations:

    priorityClassName: ""

    affinity: {}

##### GcpGw #####
gcpgw:
    enabled: false
    replicaCount: 1
    image:
        repository: opscruiseindia/oc-gcpgw
        gcpgw_tag: 0.36.100
        pullPolicy: IfNotPresent

    restartPolicy: Always

    volumeMounts:
        -   name: gcpgw-config
            mountPath: /opt/opscruise/configs/GcpGatewayConfig.json
            subPath: GcpGatewayConfig.json
        -   name: gcpgw-cert
            mountPath: /etc/ssl/certs/gcpgw-cert.pem
            subPath: gcpgw-cert.pem
        -   name: gcp-creds
            mountPath: /opt/opscruise/configs/gcp-creds.json
            subPath: gcp-creds.json

    envFrom:
        -   configMapRef:
                name: gcpgw-env-config
        -   secretRef:
                name: jgateway-secret
        -   secretRef:
                name: gcp-creds

    volumes:
        -   name: gcpgw-config
            configMap:
                name: gcpgw-config
        -   name: gcpgw-cert
            secret:
                secretName: oc-gw-certs
        -   name: gcp-creds
            secret:
                secretName: gcp-creds

    resources:
        limits:
            cpu: 500m
            memory: 512Mi
        requests:
            cpu: 100m
            memory: 128Mi

    serviceAccountName: gcpgw-service-account

    labels: {}

    annotations: {}

    tolerations:

    priorityClassName: ""

    affinity: {}

    imagePullSecrets:
        name: oc-docker-creds

    gcpCreds: "no-credential-given"

    #env config yaml
    config:
        meta:
            name: gcpgw-env-config
        oauthWithSsl: "true"
        oauthLoginEndpoint: "/protocol/openid-connect/token"
        oauthLoginGrantType: "client_credentials"
        oauthLoginScope: "openid"
        oauthIntrospectEndpoint: "/protocol/openid-connect/token/introspect"
        googleApplicationCredentials: "/opt/opscruise/configs/gcp-creds.json"
        oauthAcceptUnsecureServer: "false"
        kafka:
            sasl: "true"
            saslJaasConfig: "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required ;"
            securityProtocol: "SASL_SSL"
            saslMechanism: "OAUTHBEARER"
            saslLoginCallbackHandlerClass: "com.opscruise.gateway.auth.OauthAuthenticateLoginCallbackHandler"
            sslVerify: "false"
        gcp:
            gcpGatewayJson: "/opt/opscruise/configs/GcpGatewayConfig.json"
        quarkus:
            httpPort: "8093"
        gatewayName: "GCPGW"
        gatewayKind: "gcp"
    logLevel: "INFO"

    #configmap
    configMap:
        config:
            "filteringEnabled" : false
            "serviceLabel" : "opscruise"
            "configsLabel" : "opscruise-configs"
            "metricsLabel" : "opscruise-metrics"
            "enabledValue" : "enabled"
            "resourcePollIntervalSeconds" : 60
            "configPollIntervalSeconds" : 600
            "metricPollIntervalSeconds" : 60
            "metrics" :
                -   "compute.googleapis.com/instance/cpu/utilization"
                -   "compute.googleapis.com/instance/disk/max_read_bytes_count"
                -   "compute.googleapis.com/instance/disk/max_write_bytes_count"
                -   "compute.googleapis.com/instance/disk/read_bytes_count"
                -   "compute.googleapis.com/instance/disk/write_bytes_count"
                -   "compute.googleapis.com/instance/memory/balloon/ram_size"
                -   "compute.googleapis.com/instance/memory/balloon/ram_used"
                -   "compute.googleapis.com/instance/memory/balloon/swap_in_bytes_count"
                -   "compute.googleapis.com/instance/memory/balloon/swap_out_bytes_count"
                -   "compute.googleapis.com/instance/network/received_bytes_count"
                -   "compute.googleapis.com/instance/network/received_packets_count"
                -   "compute.googleapis.com/instance/network/sent_bytes_count"
                -   "compute.googleapis.com/instance/network/sent_packets_count"
                -   "loadbalancing.googleapis.com/https/backend_latencies|ALIGN_DELTA"
                -   "loadbalancing.googleapis.com/https/backend_request_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/https/backend_request_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/https/backend_response_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/https/frontend_tcp_rtt|ALIGN_DELTA"
                -   "loadbalancing.googleapis.com/https/internal/backend_latencies|ALIGN_DELTA"
                -   "loadbalancing.googleapis.com/https/internal/request_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/https/internal/request_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/https/internal/response_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/https/internal/total_latencies|ALIGN_DELTA"
                -   "loadbalancing.googleapis.com/https/request_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/https/request_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/https/response_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/https/total_latencies|ALIGN_DELTA"
                -   "loadbalancing.googleapis.com/l3/external/egress_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/l3/external/ingress_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/l3/external/ingress_packets_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/l3/external/rtt_latencies|ALIGN_DELTA"
                -   "loadbalancing.googleapis.com/l3/internal/egress_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/l3/internal/egress_packets_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/l3/internal/ingress_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/l3/internal/ingress_packets_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/l3/internal/rtt_latencies|ALIGN_DELTA"
                -   "loadbalancing.googleapis.com/tcp_ssl_proxy/closed_connections|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/tcp_ssl_proxy/egress_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/tcp_ssl_proxy/frontend_tcp_rtt|ALIGN_DELTA"
                -   "loadbalancing.googleapis.com/tcp_ssl_proxy/ingress_bytes_count|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/tcp_ssl_proxy/new_connections|ALIGN_RATE"
                -   "loadbalancing.googleapis.com/tcp_ssl_proxy/open_connections|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/auto_failover_request_count|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/available_for_failover|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/cpu/reserved_cores|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/cpu/usage_time|ALIGN_RATE"
                -   "cloudsql.googleapis.com/database/cpu/utilization|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/disk/bytes_used|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/disk/quota|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/disk/read_ops_count|ALIGN_RATE"
                -   "cloudsql.googleapis.com/database/disk/utilization|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/disk/write_ops_count|ALIGN_RATE"
                -   "cloudsql.googleapis.com/database/instance_state|ALIGN_COUNT_TRUE"
                -   "cloudsql.googleapis.com/database/memory/quota|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/memory/total_usage|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/memory/usage|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/memory/utilization|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/network/connections|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/network/received_bytes_count|ALIGN_RATE"
                -   "cloudsql.googleapis.com/database/network/sent_bytes_count|ALIGN_RATE"
                -   "cloudsql.googleapis.com/database/postgresql/external_sync/initial_sync_complete|ALIGN_COUNT_TRUE"
                -   "cloudsql.googleapis.com/database/postgresql/external_sync/max_replica_byte_lag|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/postgresql/insights/aggregate/execution_time|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/aggregate/io_time|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/aggregate/latencies|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/aggregate/lock_time|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/aggregate/row_count|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/aggregate/shared_blk_access_count|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/perquery/execution_time|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/perquery/io_time|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/perquery/latencies|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/perquery/lock_time|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/perquery/row_count|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/perquery/shared_blk_access_count|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/pertag/execution_time|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/pertag/io_time|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/pertag/latencies|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/pertag/lock_time|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/pertag/row_count|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/insights/pertag/shared_blk_access_count|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/postgresql/num_backends|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/postgresql/replication/replica_byte_lag|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/postgresql/transaction_count|ALIGN_RATE"
                -   "cloudsql.googleapis.com/database/replication/network_lag|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/replication/replica_lag|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/replication/state|ALIGN_COUNT_TRUE"
                -   "cloudsql.googleapis.com/database/state|ALIGN_NONE"
                -   "cloudsql.googleapis.com/database/up|ALIGN_MEAN"
                -   "cloudsql.googleapis.com/database/uptime|ALIGN_RATE"

##### TraceGw #####
tracegw:
    enabled: false
    replicaCount: 1

    serviceAccountName: tracegw-service-account

    restartPolicy: Always

    image:
        repository: opscruiseindia/oc-tracegw
        tracegw_tag: 0.36.100
        pullPolicy: IfNotPresent

    service:
        app: tracegw
        name: tracegw-service
        opscruiseGroup: gateways
        opscruiseProduct: tracegw-service
        opscruiseStream: opscruise
        protocol: TCP
        portName: grpc
        port: 8000
        targetPort: 9000

    volumeMounts:
        -   name: tracegw-cert
            mountPath: /etc/ssl/certs/tracegw-cert.pem
            subPath: tracegw-cert.pem

    volumes:
    -   name: tracegw-cert
        secret:
            secretName: oc-gw-certs

    envFrom:
        -   configMapRef:
                name: tracegw-env-config
        -   secretRef:
                name: jgateway-secret
    resources:
        limits:
            cpu: 500m
            memory: 3Gi
        requests:
            cpu: 100m
            memory: 128Mi

    imagePullSecrets:
        name: oc-docker-creds

    #env config yaml
    #env config yaml
    config:
        meta:
            name: tracegw-env-config
        oauthWithSsl: "true"
        oauthLoginEndpoint: "/protocol/openid-connect/token"
        oauthLoginGrantType: "client_credentials"
        oauthLoginScope: "openid"
        oauthIntrospectEndpoint: "/protocol/openid-connect/token/introspect"
        googleApplicationCredentials: "/opt/opscruise/configs/gcp-creds.json"
        oauthAcceptUnsecureServer: "false"
        kafka:
            sasl: "true"
            saslJaasConfig: "org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required ;"
            securityProtocol: "SASL_SSL"
            saslMechanism: "OAUTHBEARER"
            saslLoginCallbackHandlerClass: "com.opscruise.gateway.auth.OauthAuthenticateLoginCallbackHandler"
            sslVerify: "false"
        quarkus:
            httpPort: "8094"
        tracegw:
            jaegerEndpoint: "jaeger-api.opscruise.svc.K8S_CLUSTER_FQDN:16685"
            spansMaxPerBatch: "50000"
            serviceRefreshInterval: "180"
            tracesPollingInterval: "30"
            lookbackDurationSecs: "30"
            metersCollapseConsecutiveRepeatingSpans: "true"
            metersMaxNumberOfRepeatedSpans: "10"
            enableTraceForwarding: "true"
            maxTraces: "300"
            filterTagsKey: notag
            filterTagsValue: notag
            tempoJaegerGrpcSsl: "false"
            tempoTraceDupCacheDurationSec: "120"
            tempoTraceDupCacheRecordLimit: "150000"
            traceDataFromJeager: "true"
            tempoHttp: "false"
            metersExcludeAllTags: "false"
            tempoHttpApiConcurrentPool: "5"
            traceHeaders: "x-scope-orgid=orgid"
            toperationURLPattern: "[]"
            mode: "poll"
        gatewayName: "TRACEGW"
        gatewayKind: "trace"
    logLevel: "INFO"

    labels: {}

    annotations: {}

    tolerations:

    priorityClassName: ""

    affinity: {}

##### Opscruise node-exporter #####
opscruise-node-exporter:
    # this chart is disbaled by default
    enabled: false

    name: prometheus-node-exporter

    image:
        repository: opscruiseindia/oc-node-exporter
        node_exporter_tag: 1.1.0-opsc-rel36.1.0
        imagePullPolicy: IfNotPresent

    args:
        customArgs: []
        disableCollector:
            -   --no-collector.rapl
            -   --no-collector.pressure
            -   --no-collector.ocprocessevent
            -   --no-collector.ipvs_extended
            -   --no-collector.ipvs
            -   --no-collector.xfs
            -   --no-collector.powersupplyclass
            -   --no-collector.netstat
            -   --no-collector.thermal_zone
            -   --no-collector.entropy
            -   --no-collector.schedstat
            -   --no-collector.sockstat
            -   --no-collector.softnet
            -   --no-collector.timex
            -   --no-collector.ocflowbpfcollector.drop-summary-metric-for-single-url
        blackListIP: --collector.ocflowbpfcollector.black-list-ip
        procFS: --path.procfs=/host/proc
        sysFS: --path.sysfs=/host/sys
        webMaxRequests: --web.max-requests=1
        reversePathPacket: --collector.conntrackext.forward-and-reverse-path-packets
        enableAllMetrics: --collector.ocflowbpfcollector.enable-all-metrics
        interface: --collector.ocflowbpfcollector.interface
        webListenAddress: --web.listen-address=:9100
        logVar: --log.level

    logLevel: info
    interface: ^ens|^cali|^eth|^veth|^eni

    prometheus_scrape_config:
        path: /metrics
        # port: "$nePort"
        scheme: http
        scrape: "true"

    ports:
        # containerPort: 9100
        # hostPort: 9100
        name: metrics

    resources:
        limits:
            memory: 600Mi
        requests:
            cpu: 200m
            memory: 300Mi

    securityContext:
        addNETADMIN: NET_ADMIN
        addSYSADMIN: SYS_ADMIN
        privileged: true

    neLabels:
        k8sapp: opscruise-node-exporter
        version: v0.15.2
        opscruisePerimeter: opscruise
        opscruiseGroup: exporters
        opscruiseProduct: NodeExporter
        opscruiseStream: opscruise
        kubernetesIoClusterService: true
        addonmanagerKubernetesIoMode: Reconcile

    volumeMounts:
        devmountPath: /host/dev
        procmountPath: /host/proc
        sysmountPath: /host/sys
        rootfsmountPath: /rootfs
        libModulesPath: /lib/modules
        bootPath: /boot
        srcpath: /usr/src
        bpfPath: /sys/fs/bpf
        varPath: /host/var #for GKE only
        etcPath: /host/etc #for GKE only
        configMapPath: /var/opscruise/configmap

    hostNetwork: true
    hostPID: true

    imagePullSecrets:
        name: oc-docker-creds

    serviceAccountName: ne-service-account

    labels: {}

    annotations: {}

    tolerations:

    priorityClassName: ""

    blackListIPs: ""

    volumes:
        procpath: /proc
        devpath: /dev
        syspath: /sys
        rootfspath: /
        libmodulespath: /lib/modules
        bootpath: /boot
        srcpath: /usr/src
        bpfpath: /sys/fs/bpf
        varpath: /var #for GKE only
        etcpath: /etc #for GKE only

    updateStrategy:
        type: RollingUpdate

    amazonlinux:
        name: oc-node-exporter-amzn
        initContainer:
            name: install-linux-headers
            image: amazonlinux
            command: ["bin/bash","-c","ls /usr/src/kernels/ | grep  -o $(uname -r) && { echo linux headers already installed; } || { uname -r | grep -o -E '^[0-9].[0-9]*' | head -1 | awk '$0>=4.19' | grep -o -E '[0-9].[0-9]*' && amazon-linux-extras install -y kernel-$(uname -r | grep -o -E '(^[5-9].[0-9]*)' | head -1); yum install -y kernel-headers-$(uname -r) && yum install -y kernel-devel-$(uname -r); } || { echo linux headers not installed; }"]
            volumeMounts:
                name: src
                mountPath: /usr/src
        matchExpressions:
            key: opscruise.io/linux
            operator: In
            values: amazonlinux

    ubuntu18_04:
        name: oc-node-exporter-ubuntu-18.04
        initContainer:
            name: install-linux-headers
            image: ubuntu:18.04
            command: ["bin/bash","-c","ls /usr/src/ | grep 'linux.*headers\\|kernel.*headers' && { echo linux headers already installed; } || { apt-get -y update && apt-get install -y linux-headers-$(uname -r); } || { echo linux headers not installed; }"]
            volumeMounts:
                name: src
                mountPath: /usr/src
        matchExpressions:
            key: opscruise.io/linux
            operator: In
            values: ubuntu-18.04

    ubuntu20_04:
        name: oc-node-exporter-ubuntu-20.04
        initContainer:
            name: install-linux-headers
            image: ubuntu:20.04
            command: ["bin/bash","-c","ls /usr/src/ | grep 'linux.*headers\\|kernel.*headers' && { echo linux headers already installed; } || { apt-get -y update && apt-get install -y linux-headers-$(uname -r); }"]
            volumeMounts:
                name: src
                mountPath: /usr/src
        matchExpressions:
            key: opscruise.io/linux
            operator: In
            values: ubuntu-20.04

    centos8:
        name: oc-node-exporter-centos-8
        initContainer:
            name: install-linux-headers
            image: centos:8
            command: ["bin/bash","-c","ls /usr/src/kernels/ | grep  -o $(uname -r) && { echo linux headers already installed; } || { yum install -y kernel-headers-$(uname -r) && yum install -y kernel-devel-$(uname -r); } || { echo linux headers not installed; }"]
            volumeMounts:
                name: src
                mountPath: /usr/src
        matchExpressions:
            key: opscruise.io/linux
            operator: In
            values: centos-8

    centos7:
        name: oc-node-exporter-centos-7
        initContainer:
            name: install-linux-headers
            image: centos:7
            command: ["bin/bash","-c","ls /usr/src/kernels/ | grep  -o $(uname -r) && { echo linux headers already installed; } || { yum install -y kernel-headers-$(uname -r) && yum install -y kernel-devel-$(uname -r); } || { echo linux headers not installed; }"]
            volumeMounts:
                name: src
                mountPath: /usr/src
        matchExpressions:
            key: opscruise.io/linux
            operator: In
            values: centos-7

    gke:
        nePrefixTag: gke-
        name: oc-node-exporter-gke
        matchExpressions:
            key: cloud.google.com/gke-os-distribution
            operator: In
            values: cos

    rhel_coreos:
        nePrefixTag: rhel-coreos-
        name: oc-node-exporter-rhel-coreos
        matchExpressions:
            key: opscruise.io/linux
            operator: In
            values: rhel-coreos

    # Select if no label has set or matched
    baseImage:
        name: oc-node-exporter
        matchExpressions:
            key: opscruise.io/linux
            operator: NotIn
            values:
                amazonlinux: amazonlinux
                ubuntu18_04: ubuntu-18.04
                ubuntu20_04: ubuntu-20.04
                centos8: centos-8
                centos7: centos-7
                chromiumcos: cos
                rhel_coreos: rhel-coreos

    configMapName: opsc-ne-configmap
    configMap:
        config:
            "enable_url_metrics": true
            "full_uri": false
            "default_rule":
                "depth": 3
                "enable": true
                "from_last": false
            "custom_rules":
            -   value: "$1"
                condition: "(.*=).*"
                priority: 0
                enable: true
                exclude: false
            "url_segments":
                "enable": false
                "segments": ""


##### opscruise node exporter with BPF #####
opscruise-node-exporter-new:
    # enabled: false

    name: prometheus-node-exporter-new
    podName: oc-node-exporter-core

    image:
        repository: opscruiseindia/oc-node-exporter
        node_exporter_bpf_core_tag: core-1.1.0-opsc-rel36.1.0
        imagePullPolicy: IfNotPresent

    args:
        customArgs: []
        disableCollector:
            -   --no-collector.rapl
            -   --no-collector.pressure
            -   --no-collector.ocprocessevent
            -   --no-collector.ipvs_extended
            -   --no-collector.ipvs
            -   --no-collector.xfs
            -   --no-collector.powersupplyclass
            -   --no-collector.netstat
            -   --no-collector.thermal_zone
            -   --no-collector.entropy
            -   --no-collector.schedstat
            -   --no-collector.sockstat
            -   --no-collector.softnet
            -   --no-collector.timex
            -   --no-collector.ocflowbpfcollector.drop-summary-metric-for-single-url
        blackListIP: "--collector.ocflowbpfcollector.black-list-ip"
        btfFilePath: "--collector.ocflowbpfcollector.btf-file-path"
        btfCustomURLPath: "--collector.ocflowbpfcollector.btf-custom-url-path"
        kconfigFilePath: "--collector.ocflowbpfcollector.kconfig-file-path"
        procFS: --path.procfs=/host/proc
        sysFS: --path.sysfs=/host/sys
        webMaxRequests: --web.max-requests=1
        reversePathPacket: --collector.conntrackext.forward-and-reverse-path-packets
        enableAllMetrics: --collector.ocflowbpfcollector.enable-all-metrics
        interface: --collector.ocflowbpfcollector.interface
        webListenAddress: --web.listen-address=:9100
        k8sgwAllConfigIpListURL: "--collector.ocflowbpfcollector.k8sgw-all-config-iplist-url"
        k8sgwEventConfigIpListURL: "--collector.ocflowbpfcollector.k8sgw-event-config-iplist-url"
        enableNamespaceFiltering: --collector.ocflowbpfcollector.enable-namespace-filter
        logVar: --log.level

    logLevel: info

    interface: ^ens|^cali|^eth|^veth|^eni

    btfFilePath: ""
    btfCustomURLPath: ""
    kconfigFilePath: ""
    k8sgwAllConfigIpListURL: http://k8sgw-service.opscruise.svc.K8S_CLUSTER_FQDN:8586/collect-all-config-iplist
    k8sgwEventConfigIpListURL: http://k8sgw-service.opscruise.svc.K8S_CLUSTER_FQDN:8586/collect-event-config-iplist

    prometheus_scrape_config:
        path: /metrics
        # port: "$nePort"
        scheme: http
        scrape: "true"
    ports:
        # containerPort: 9100
        # hostPort: 9100
        name: metrics

    resources:
        limits:
            memory: 600Mi
        requests:
            cpu: 200m
            memory: 300Mi

    securityContext:
        addNETADMIN: NET_ADMIN
        addSYSADMIN: SYS_ADMIN
        privileged: true

    neLabels:
        k8sapp: opscruise-node-exporter
        version: v0.15.2
        opscruisePerimeter: opscruise
        opscruiseGroup: exporters
        opscruiseProduct: NodeExporter
        opscruiseStream: opscruise
        kubernetesIoClusterService: true
        addonmanagerKubernetesIoMode: Reconcile

    volumeMounts:
        devmountPath: /host/dev
        procmountPath: /host/proc
        sysmountPath: /host/sys
        rootfsmountPath: /rootfs
        libModulesPath: /lib/modules
        bootPath: /boot
        varPath: /host/var
        etcOSReleasePath: /host/etc/os-release #for GKE only
        configMapPath: /var/opscruise/configmap
        sysKernelDebugPath: /sys/kernel/debug

    hostNetwork: true
    hostPID: true
    dnsPolicy: ClusterFirstWithHostNet

    imagePullSecrets:
        name: oc-docker-creds

    serviceAccountName: ne-service-account

    labels: {}

    annotations: {}

    tolerations:

    priorityClassName: ""

    blackListIPs: ""

    volumes:
        procpath: /proc
        devpath: /dev
        syspath: /sys
        rootfspath: /
        libmodulespath: /lib/modules
        bootpath: /boot
        varpath: /var
        etcosreleasepath: /etc/os-release
        syskerneldebugpath: /sys/kernel/debug

    updateStrategy:
        type: RollingUpdate

    configMapName: opsc-ne-configmap
    configMap:
        config:
            "enable_url_metrics": true
            "full_uri": false
            "default_rule":
                "depth": 3
                "enable": true
                "from_last": false
            "custom_rules":
            -   value: "$1"
                condition: "(.*=).*"
                priority: 0
                enable: true
                exclude: false
            "url_segments":
                "enable": false
                "segments": ""

##### cadvisor #####
cadvisor:
    #enabled: true

    serviceAccountName: cadvisor-service-account
    
    name: cadvisor
    k8sapp: cadvisor-logging
    opscruisePerimeter: opscruise
    opscruiseGroup: exporters
    opscruiseProduct: cAdvisor
    opscruiseStream: opscruise

    image:
        repository: gcr.io/google_containers/cadvisor
        tag: v0.35.0

    labels: {}

    annotations: {}

    tolerations: []

    priorityClassName: ""
    
    hostNetwork: false
    hostPID: false

    prometheus_scrape_config:
        path: /metrics
        port: "{{ .Values.ports.containerPort }}"
        scheme: http
        scrape: "true"

    ports:
        name: http
        containerPort: 8080
        protocol: TCP

    volumeMounts:
        rootfsmountPath: /rootfs
        rootfsname: rootfs
        rootfsreadOnly: true
        varrunmountPath: /var/run
        varname: var-run
        varrunreadOnly: false
        sysmountPath: /sys
        sysname: sys
        sysreadOnly: true
        dockermountPath: /var/lib/docker
        dockername: docker
        dockerreadOnly: true
        diskmountPath: /dev/disk
        diskname: disk
        diskreadOnly: true

    terminationGracePeriodSeconds: 30

    volumes:
        rootfsname: rootfs
        rootfspath: /
        runname: var-run
        runpath: /var/run
        sysname: sys
        syspath: /sys
        dockername: docker
        dockerpath: /var/lib/docker
        diskname: disk
        diskpath: /dev/disk

    customArgs:
        - --enable_load_reader=false
    args:
        - "--housekeeping_interval=10s"
        - "--disable_metrics=udp,tcp"
        - "--store_container_labels=false"
        - "--whitelisted_container_labels=io.kubernetes.pod.uid,io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace,annotation.kubernetes.io.config.seen,io.kubernetes.docker.type,k8s.app,pod.template.hash,app,id,image,job,name,device,instance"
        
    resources:
        limits:
            cpu: 300m
            memory: 512Mi
        requests:
            cpu: 100m
            memory: 128Mi

##### KSM #####
kube-state-metrics:
    #enabled: true

    name: kube-state-metrics
    k8sapp: kube-state-metrics
    opscruisePerimeter: opscruise
    opscruiseGroup: exporters
    opscruiseProduct: KSM
    opscruiseStream: opscruise

    replicaCount: 1

    image:
        repository: quay.io/coreos/kube-state-metrics
        tag: v2.0.0-rc.0

    prometheus_scrape_config:
        path: /metrics
        port: "{{ .Values.ports.containerPort1 }}"
        scheme: http
        scrape: "true"

    ports:
        name1: http-metrics
        containerPort1: 8080
        name2: telemetry
        containerPort2: 8081

    readinessProbe:
        path: /healthz
        port: 8080
        initialDelaySeconds: 5
        timeoutSeconds: 5

    serviceAccount:
        name: kube-state-metrics

    # ClusterRoleBinding:
    #     name: kube-state-metrics

    labels: {}

    annotations: {}

    tolerations:

    priorityClassName: ""

    resources:
        requests:
            cpu: 100m
            memory: 30Mi
        limits:
            cpu: 300m
            memory: 250Mi

##### prometheus #####
prometheus:
    #enabled: true
    serviceAccountName: prometheus-service-account

    enableIstio: false

    replicaCount: 1

    image:
        repository: prom/prometheus
        tag: v2.36.2
        pullPolicy: IfNotPresent

    initContainer:
        -   name: "init-chown-data"
            image: debian:9
            imagePullPolicy: IfNotPresent
            command: ["chown", "-R", "65534:65534", "/data"]
            volumeMounts:
            -   name: oc-prometheus-data
                mountPath: /data
                subPath: ""

    affinity: {}

    args:
        configFile: '--config.file=/etc/prometheus/prometheus.yml'
        webListenAddress: '--web.listen-address=0.0.0.0:9090'
        storageTsdbPath: '--storage.tsdb.path=/data'
        webEnableLifecycle: '--web.enable-lifecycle'
        storageTsdbRetentionTime: '--storage.tsdb.retention.time=2h'
        storageTsdbRetentionSize: '--storage.tsdb.retention.size=5GB'
        storageTsdbMinBlockDuration: '--storage.tsdb.min-block-duration=2h'
        storageTsdbMaxBlockDuration: '--storage.tsdb.max-block-duration=2h'
        logVar: --log.level
    logLevel: info

    ports:
        containerPort: 9090

    readinessProbe:
        httpGet:
            path: /-/ready
            port: 9090
        initialDelaySeconds: 30
        timeoutSeconds: 30

    livenessProbe:
        httpGet:
            path: /-/healthy
            port: 9090
        initialDelaySeconds: 30
        timeoutSeconds: 30

    resources:
        requests:
            cpu: 200m
            memory: 1000Mi
        limits:
            memory: 5Gi

    volumeMounts:
        -   name: config-volume
            mountPath: /etc/prometheus

    hostNetwork: true
    hostPID: true

    terminationGracePeriodSeconds: 300

    volumes:
        -   name: config-volume
            configMap:
                name: prometheus-configmap

    restartPolicy: Always

    rules:
        apiGroups:
            extensions: extensions
            resources:
                nodes: nodes
                nodeOrProxy: nodes/proxy
                services: services
                endpoints: endpoints
                pods: pods
                ingresses: ingresses
            # verbs: ["get", "list", "watch"]
    
    # scrape_interval interms of seconds 
    # scrape_interval: 30
    nonIstioConfigMap:
        additionalScrapeConfigs:
        data:
            prometheus_yml:
                global:
                    scrape_interval: scrape_interval_x_1s
                    evaluation_interval: scrape_interval_x_1s
                scrape_configs:
                    -   job_name: 'oc-kubernetes-pods'
                        scheme: http
                        kubernetes_sd_configs:
                        -   role: pod
                        tls_config:
                            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                        relabel_configs:
                        -   source_labels: [__meta_kubernetes_pod_label_opscruisePerimeter]
                            regex: opscruise
                            action: keep
                        -   source_labels: [ __address__ ]
                            action: replace
                            regex: '(.*)(:.*)'
                            replacement: $1
                            target_label: neinstip
                        metric_relabel_configs:
                        -   source_labels: [__name__]
                            regex: 'container_.*|node_cpu_utilization|node_cpu_utilization|node_cpu_seconds_total|node_memory_MemFree_bytes|node_memory_Cached_bytes|node_memory_Buffers_bytes|node_memory_MemTotal_bytes|node_memory_Active_bytes|node_memory_Utilization|node_memory_MemTotal_bytes|node_disk_io_time_seconds_total|node_disk_read_bytes_total|node_disk_written_bytes_total|node_disk_io_time_weighted_seconds_total|node_filesystem_size_bytes|node_filesystem_free_bytes|node_disk_read_time_seconds_total|node_disk_write_time_seconds_total|node_disk_reads_completed_total|node_disk_writes_completed_total|node_network_receive_bytes_total|node_network_transmit_bytes_total|node_network_receive_drop_total|node_network_transmit_drop_total|node_network_receive_errs_total|node_network_transmit_errs_total|node_ipvs_incoming_bytes_total|node_ipvs_outgoing_bytes_total|node_load1|node_context_switches_total|node_num_core_count|namedprocess_.*|node_flowstats_.*|kube_.*|prometheus_.*|scrape_.*|redis_.*|nodejs_.*|nginx_.*|jvm_.*|pg_.*|mongo.*|mysql.*|kafka.*|x509.*|node_disk_utilization|node_filesystem_avail_bytes|node_disk_used_bytes|aws_.*'
                            action: keep
                        -   source_labels: [ "forward_path_src", "neinstip" ]
                            action: replace
                            regex: '(127.0.0.1);(.*)'
                            replacement: $2
                            target_label: forward_path_src
                        -   source_labels: [ "forward_path_dst", "neinstip" ]
                            action: replace
                            regex: '(127.0.0.1);(.*)'
                            replacement: $2
                            target_label: forward_path_dst
                        -   source_labels: [ "reverse_path_src", "neinstip" ]
                            action: replace
                            regex: '(127.0.0.1);(.*)'
                            replacement: $2
                            target_label: reverse_path_src
                        -   source_labels: [ "reverse_path_dst", "neinstip" ]
                            action: replace
                            regex: '(127.0.0.1);(.*)'
                            replacement: $2
                            target_label: reverse_path_dst
                        -   source_labels: [__name__, container_label_io_kubernetes_container_name]
                            separator: ;
                            regex: (container_.*);(^\s*$)
                            replacement: $1
                            action: drop
                        -   source_labels: [__name__]
                            separator: ;
                            regex: container_network.*
                            target_label: container_label_io_kubernetes_container_name
                            replacement: "true"
                            action: replace
                        -   source_labels: [container_label_io_kubernetes_container_name]
                            separator: ;
                            regex: POD
                            replacement: $1
                            action: drop
                    -   job_name: 'oc-app-exporters'
                        scheme: http
                        kubernetes_sd_configs:
                        - role: service
                        tls_config:
                            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                        relabel_configs:
                        - source_labels: [__meta_kubernetes_service_label_opscruisePerimeter]
                          regex: opscruise
                          action: keep
                        - target_label: provider
                          replacement: "container"
                        - source_labels: [__meta_service_label_provider]
                          regex: '(\S.*)'
                          target_label: provider
                    -   job_name: kubernetes-nodes-cadvisor
                        scheme: https  # remove if you want to scrape metrics on insecure port
                        tls_config:
                            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                        kubernetes_sd_configs:
                            - role: node
                        relabel_configs:
                        -   action: labelmap
                            regex: __meta_kubernetes_node_label_(.+)
                        -   target_label: __address__
                            replacement: kubernetes.default.svc:443
                        -   source_labels: [__meta_kubernetes_node_name]
                            regex: (.+)
                            target_label: __metrics_path__
                            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
                        metric_relabel_configs:
                        -   action: replace
                            source_labels: [id]
                            regex: '^/machine.slice/machine-rkt\x2d([^\]+)\.+/([^/]+).service$'
                            target_label: rkt_container_name
                            replacement: '${2}-${1}'
                        -   action: replace
                            source_labels: [id]
                            regex: '^/system.slice/(.+).service$'
                            target_label: systemd_service_name
                            replacement: '${1}'
                        -   action: replace
                            source_labels: [container]
                            regex: (.*)
                            target_label: container_label_io_kubernetes_container_name
                            replacement: ${1}
                        -   action: replace
                            source_labels: [pod]
                            regex: (.*)
                            target_label: container_label_io_kubernetes_pod_name
                            replacement: ${1}
                        -   action: replace
                            source_labels: [namespace]
                            regex: (.*)
                            target_label: container_label_io_kubernetes_pod_namespace
                            replacement: ${1}
                        -   action: replace
                            source_labels: [id]
                            regex: '.+?pod([^\.g-z]+?)[\.\/\s](.*)'
                            target_label: container_label_io_kubernetes_pod_uid
                            replacement: ${1}
                        -   source_labels: [container_label_io_kubernetes_pod_uid]
                            separator: ;
                            regex: (\w+)_(\w+)_(\w+)_(\w+)_(\w+)
                            target_label: container_label_io_kubernetes_pod_uid
                            replacement: ${1}-${2}-${3}-${4}-${5}
                            action: replace            
                        -   source_labels: [__name__, container_label_io_kubernetes_container_name]
                            separator: ;
                            regex: (container_.*);(^\s*$)
                            replacement: $1
                            action: drop
                        -   source_labels: [__name__]
                            separator: ;
                            regex: container_network.*
                            target_label: container_label_io_kubernetes_container_name
                            replacement: "true"
                            action: replace
                        -   source_labels: [container_label_io_kubernetes_container_name]
                            separator: ;
                            regex: POD
                            replacement: $1
                            action: drop
                        -   action: keep
                            regex: NAMESPACE_WHITELIST_REPLACE
                            source_labels:
                            - container_label_io_kubernetes_pod_namespace
                remote_write:
                    -   url: "http://promgw-service.opscruise.svc.K8S_CLUSTER_FQDN:8585/ingest"
                        queue_config:
                            max_samples_per_send: 1000
                            capacity: 10000
                            max_shards: 5

                rule_files:
                -   /etc/prometheus/recording_rules.yml
            recording_rules_yml:
                groups:
                -   name: opscruise_rules
                    rules:
                    -   record: bpf_l7_req_cnt_per_seconds
                        expr: |
                            (node_flowstats_bpf_l7_req_cnt / scrape_interval_x_1) > 0
                    -   record: node_cpu_utilization
                        expr: |
                            (100 - (avg by(instance, job) (rate(node_cpu_seconds_total{mode="idle"}[scrape_interval_x_3s])) * 100))
                    -   record: node_cpu_aggregated_seconds_total
                        expr: |
                            ((1 - (avg by(instance, job) (rate(node_cpu_seconds_total{mode="idle"}[scrape_interval_x_3s])))) * (count without(cpu, mode, neinstip) (node_cpu_seconds_total{mode="idle"})) * scrape_interval_x_1)
                    -   record: node_disk_read_time_seconds
                        expr: |
                            (rate(node_disk_read_time_seconds_total[scrape_interval_x_3s]) > 0) / (rate(node_disk_reads_completed_total[scrape_interval_x_3s]) > 0)
                    -   record: node_disk_write_time_seconds
                        expr: |
                            (rate(node_disk_write_time_seconds_total[scrape_interval_x_3s]) > 0) / (rate(node_disk_writes_completed_total[scrape_interval_x_3s]) > 0)
                    -   record: node_memory_Utilization
                        expr: |
                            (100 * (1 - ((node_memory_MemFree_bytes + node_memory_Cached_bytes + node_memory_Buffers_bytes) / node_memory_MemTotal_bytes)))
                    -   record: container_cpu_usage_core_total
                        expr: |
                            (sum by(container_label_annotation_kubernetes_io_config_seen, container_label_io_kubernetes_container_name, container_label_io_kubernetes_docker_type, container_label_io_kubernetes_pod_name, container_label_io_kubernetes_pod_namespace, container_label_io_kubernetes_pod_uid, container_label_k8s_app, container_label_pod_template_hash, id, image, instance, job, name) (rate(container_cpu_usage_seconds_total[scrape_interval_x_2s])))
                    -   record: container_spec_cpu_utilization
                        expr: |
                            (sum by(container_label_annotation_kubernetes_io_config_seen, container_label_io_kubernetes_container_name, container_label_io_kubernetes_docker_type, container_label_io_kubernetes_pod_name, container_label_io_kubernetes_pod_namespace, container_label_io_kubernetes_pod_uid, container_label_k8s_app, container_label_pod_template_hash, id, image, instance, job, name) (rate(container_cpu_usage_seconds_total[scrape_interval_x_3s])))
                    -   record: namedprocess_namegroup_cpu_aggregated_seconds_total
                        expr: |
                            (sum by (instance,job,groupname, name, username, pgid, pid, startTime, port) (namedprocess_namegroup_cpu_seconds_total) )
                    -   record: namedprocess_namegroup_aggregated_memory_bytes
                        expr: |
                            (sum without(memtype) (namedprocess_namegroup_memory_bytes{memtype=~"proportionalResident|proportionalSwapped"}))
                    -   record: node_num_core_count
                        expr: |
                            count by(instance, job, name, username, pgid, startTime) (node_cpu_seconds_total{mode=~"system"})
                    -   record: namedprocess_namegroup_thread_cpu_aggregrated_seconds_total
                        expr: |
                            (sum by (instance,job,groupname,threadname, name, username, pgid, pid, startTime, port) (namedprocess_namegroup_thread_cpu_seconds_total))
                    -   record: namedprocess_namegroup_cpu_utilization
                        expr: |
                            (sum by (instance,job,groupname, name, username, pgid, pid, startTime, port) (rate(namedprocess_namegroup_cpu_seconds_total[scrape_interval_x_3s])))
                    -   record: node_flowstats_src_merged_bpf_l7_req_cnt
                        expr: |
                            (node_flowstats_bpf_l7_req_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_cnt{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_req_method_get_cnt
                        expr: |
                            (node_flowstats_bpf_l7_req_method_get_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_method_get_cnt{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_req_method_put_cnt
                        expr: |
                            (node_flowstats_bpf_l7_req_method_put_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_method_put_cnt{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_req_method_other_cnt
                        expr: |
                            (node_flowstats_bpf_l7_req_method_other_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_method_other_cnt{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_rsperr_cnt
                        expr: |
                            (node_flowstats_bpf_l7_rsperr_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_rsperr_cnt{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_rsptime_avg_ms
                        expr: |
                            (node_flowstats_bpf_l7_rsptime_avg_ms{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_rsptime_avg_ms{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_rsptime_max_ms
                        expr: |
                            (node_flowstats_bpf_l7_rsptime_max_ms{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_rsptime_max_ms{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_rsptime_min_ms
                        expr: |
                            (node_flowstats_src_merged_bpf_l7_rsptime_min_ms{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_src_merged_bpf_l7_rsptime_min_ms{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_conntrack_bytes_difference
                        expr: |
                            (node_flowstats_conntrack_bytes_difference{target_pid!="", source_pid=""})* on (forward_path_src, forward_path_dst, forward_path_dport, reverse_path_src, reverse_path_dst, reverse_path_sport) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_conntrack_bytes_difference{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_conntrack_forward_path_bytes_difference
                        expr: |
                            (node_flowstats_conntrack_forward_path_bytes_difference{target_pid!="", source_pid=""})* on (forward_path_src, forward_path_dst, forward_path_dport, reverse_path_src, reverse_path_dst, reverse_path_sport) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_conntrack_forward_path_bytes_difference{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_conntrack_reverse_path_bytes_difference
                        expr: |
                            (node_flowstats_conntrack_reverse_path_bytes_difference{target_pid!="", source_pid=""})* on (forward_path_src, forward_path_dst, forward_path_dport, reverse_path_src, reverse_path_dst, reverse_path_sport) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_conntrack_reverse_path_bytes_difference{source_pid!="",target_pid=""}
                    
                    -   record: node_disk_utilization
                        expr: |
                            (100 - ((node_filesystem_avail_bytes{mountpoint="/"} * 100) / node_filesystem_size_bytes{mountpoint="/"}))
                    -   record: node_disk_used_bytes
                        expr: |
                            (node_filesystem_size_bytes{mountpoint="/"} - node_filesystem_free_bytes{mountpoint="/"})
                    -   record: http_api_requests_total_count
                        expr: |
                            (sum by (handler,instance,job,method,path,status,provider)(http_api_requests_total))

    istioConfigMap:
        additionalScrapeConfigs:
        data:
            prometheus_yml:
                global:
                    scrape_interval: scrape_interval_x_1s
                    evaluation_interval: scrape_interval_x_1s

                scrape_configs:
                    -   job_name: 'kubernetes-pods'
                        kubernetes_sd_configs:
                        -   role: pod
                        relabel_configs:  # If first two labels are present, pod should be scraped  by the istio-secure job.
                        -   source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                            action: keep
                            regex: true
                        -   source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                            action: replace
                            target_label: __metrics_path__
                            regex: (.+)
                        -   source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                            action: replace
                            regex: ([^:]+)(?::\d+)?;(\d+)
                            replacement: $1:$2
                            target_label: __address__
                        -   action: labelmap
                            regex: __meta_kubernetes_pod_label_(.+)
                        -   source_labels: [__meta_kubernetes_namespace]
                            action: replace
                            target_label: namespace
                        -   source_labels: [__meta_kubernetes_pod_name]
                            action: replace
                            target_label: pod_name
                        -   source_labels: [ __address__ ]
                            action: replace
                            regex: '(.*)(:.*)'
                            replacement: $1
                            target_label: src_ip
                        -   source_labels: [ __meta_kubernetes_pod_label_app ]
                            action: replace
                            regex: 'istio-ingressgateway'
                            replacement: '1.1.1.1'
                            target_label: src_ip
                        metric_relabel_configs:
                        -   source_labels: [__name__]
                            regex: 'istio_requests_total|istio_request_duration_milliseconds_sum|istio_request_duration_milliseconds_count'
                            action: keep
                        -   source_labels: [ reporter ]
                            regex: 'source'
                            action: keep
                        -   source_labels: [__name__, container_label_io_kubernetes_container_name]
                            separator: ;
                            regex: (container_.*);(^\s*$)
                            replacement: $1
                            action: drop
                        -   source_labels: [__name__]
                            separator: ;
                            regex: container_network.*
                            target_label: container_label_io_kubernetes_container_name
                            replacement: "true"
                            action: replace
                        -   source_labels: [container_label_io_kubernetes_container_name]
                            separator: ;
                            regex: POD
                            replacement: $1
                            action: drop
                    -   job_name: 'oc-kubernetes-pods'
                        scheme: http
                        kubernetes_sd_configs:
                        -   role: pod
                        tls_config:
                            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                        relabel_configs:
                        -   source_labels: [__meta_kubernetes_pod_label_opscruisePerimeter]
                            regex: opscruise
                            action: keep
                        -   source_labels: [ __address__ ]
                            action: replace
                            regex: '(.*)(:.*)'
                            replacement: $1
                            target_label: neinstip
                        metric_relabel_configs:
                        -   source_labels: [ "forward_path_src", "neinstip" ]
                            action: replace
                            regex: '(127.0.0.1);(.*)'
                            replacement: $2
                            target_label: forward_path_src
                        -   source_labels: [ "forward_path_dst", "neinstip" ]
                            action: replace
                            regex: '(127.0.0.1);(.*)'
                            replacement: $2
                            target_label: forward_path_dst
                        -   source_labels: [ "reverse_path_src", "neinstip" ]
                            action: replace
                            regex: '(127.0.0.1);(.*)'
                            replacement: $2
                            target_label: reverse_path_src
                        -   source_labels: [ "reverse_path_dst", "neinstip" ]
                            action: replace
                            regex: '(127.0.0.1);(.*)'
                            replacement: $2
                            target_label: reverse_path_dst
                    -   job_name: 'oc-app-exporters'
                        scheme: http
                        kubernetes_sd_configs:
                        - role: service
                        tls_config:
                          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                        relabel_configs:
                        -   source_labels: [__meta_kubernetes_service_label_opscruisePerimeter]
                            regex: opscruise
                            action: keep
                    -   job_name: kubernetes-nodes-cadvisor
                        scheme: https  # remove if you want to scrape metrics on insecure port
                        tls_config:
                            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                        kubernetes_sd_configs:
                            - role: node
                        relabel_configs:
                        -   action: labelmap
                            regex: __meta_kubernetes_node_label_(.+)
                        -   target_label: __address__
                            replacement: kubernetes.default.svc:443
                        -   source_labels: [__meta_kubernetes_node_name]
                            regex: (.+)
                            target_label: __metrics_path__
                            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
                        metric_relabel_configs:
                        -   action: replace
                            source_labels: [id]
                            regex: '^/machine.slice/machine-rkt\x2d([^\]+)\.+/([^/]+).service$'
                            target_label: rkt_container_name
                            replacement: '${2}-${1}'
                        -   action: replace
                            source_labels: [id]
                            regex: '^/system.slice/(.+).service$'
                            target_label: systemd_service_name
                            replacement: '${1}'
                        -   action: replace
                            source_labels: [container]
                            regex: (.*)
                            target_label: container_label_io_kubernetes_container_name
                            replacement: ${1}
                        -   action: replace
                            source_labels: [pod]
                            regex: (.*)
                            target_label: container_label_io_kubernetes_pod_name
                            replacement: ${1}
                        -   action: replace
                            source_labels: [namespace]
                            regex: (.*)
                            target_label: container_label_io_kubernetes_pod_namespace
                            replacement: ${1}
                        -   action: replace
                            source_labels: [id]
                            regex: '.+?pod([^\.g-z]+?)[\.\/\s](.*)'
                            target_label: container_label_io_kubernetes_pod_uid
                            replacement: ${1}
                        -   source_labels: [container_label_io_kubernetes_pod_uid]
                            separator: ;
                            regex: (\w+)_(\w+)_(\w+)_(\w+)_(\w+)
                            target_label: container_label_io_kubernetes_pod_uid
                            replacement: ${1}-${2}-${3}-${4}-${5}
                            action: replace                            
                        -   source_labels: [__name__, container_label_io_kubernetes_container_name]
                            separator: ;
                            regex: (container_.*);(^\s*$)
                            replacement: $1
                            action: drop
                        -   source_labels: [__name__]
                            separator: ;
                            regex: container_network.*
                            target_label: container_label_io_kubernetes_container_name
                            replacement: "true"
                            action: replace
                        -   source_labels: [container_label_io_kubernetes_container_name]
                            separator: ;
                            regex: POD
                            replacement: $1
                            action: drop
                remote_write:
                    -   url: "http://promgw-service.opscruise.svc.K8S_CLUSTER_FQDN:8585/ingest"
                        queue_config:
                            max_samples_per_send: 1000
                            capacity: 10000
                            max_shards: 5
                        write_relabel_configs:
                        -   source_labels: [job]
                            regex: '(cadvisor|kubernetes-pods|kube-state-metrics|oc-kubernetes-pods|oc-node-exporter)'
                            action: keep
                rule_files:
                -   /etc/prometheus/recording_rules.yml
            recording_rules_yml:
                groups:
                -   name: istio.opscruise.rules
                    rules:
                    -   record: istio_l7_url_req_cnt
                        expr: |
                            (((sum without(response_code) (idelta(istio_requests_total{job="kubernetes-pods",reporter="source",url=~"/.*"}[1m]))) and on() (count_over_time(istio_requests_total[80s]) >1)) or ((sum without(response_code) (istio_requests_total{job="kubernetes-pods",reporter="source",url=~"/.*"})))) > 0
                    -   record: istio_l7_url_rsptime_avg_ms
                        expr: |
                            ((((sum without(response_code) (rate(istio_request_duration_milliseconds_sum{job="kubernetes-pods",reporter="source",url=~"/.*"}[1m]))) / (sum without(response_code) (rate(istio_request_duration_milliseconds_count{job="kubernetes-pods",reporter="source",url=~"/.*"}[1m])))) and on() (count_over_time(istio_requests_total[80s]) >1)) or ((sum without(response_code) (istio_request_duration_milliseconds_sum{job="kubernetes-pods",reporter="source",url=~"/.*"}))/(istio_request_duration_milliseconds_count{job="kubernetes-pods",reporter="source",url=~"/.*"}))) > 0
                    -   record: istio_l7_url_rsperr_cnt
                        expr: |
                            (((sum without(response_code) (idelta(istio_requests_total{job="kubernetes-pods",reporter="source", response_code=~"[45][0-9]{2}" ,url=~"/.*"}[1m]))) and on() (count_over_time(istio_requests_total[80s]) >1)) or ((sum without(response_code) (istio_requests_total{job="kubernetes-pods",reporter="source",response_code=~"[45][0-9]{2}",url=~"/.*"})))) > 0
                    -   record: istio_l7_req_cnt
                        expr: |
                            (((sum without(url, response_code) (idelta(istio_requests_total{job="kubernetes-pods",reporter="source",url=~"/.*"}[1m]))) and on() (count_over_time(istio_requests_total[80s]) >1)) or ((sum without(url, response_code) (istio_requests_total{job="kubernetes-pods",reporter="source",url=~"/.*"})))) > 0
                        labels:
                            url: "None"
                    -   record: istio_l7_rsptime_avg_ms
                        expr: |
                            ((((sum without(url, response_code) (rate(istio_request_duration_milliseconds_sum{job="kubernetes-pods",reporter="source",url=~"/.*"}[1m]))) / (sum without(url, response_code) (rate(istio_request_duration_milliseconds_count{job="kubernetes-pods",reporter="source",url=~"/.*"}[1m])))) and on() (count_over_time(istio_requests_total[80s]) >1)) or ((sum without(url, response_code) (istio_request_duration_milliseconds_sum{job="kubernetes-pods",reporter="source",url=~"/.*"}))/(istio_request_duration_milliseconds_count{job="kubernetes-pods",reporter="source",url=~"/.*"}))) > 0
                        labels:
                            url: "None"
                    -   record: istio_l7_rsperr_cnt
                        expr: |
                            (((sum without(url, response_code) (idelta(istio_requests_total{job="kubernetes-pods",reporter="source", response_code=~"[45][0-9]{2}" ,url=~"/.*"}[1m]))) and on() (count_over_time(istio_requests_total[80s]) >1)) or ((sum without(url, response_code) (istio_requests_total{job="kubernetes-pods",reporter="source",response_code=~"[45][0-9]{2}",url=~"/.*"})))) > 0
                        labels:
                            url: "None"

                -   name: opscruise_rules
                    rules:
                    -   record: bpf_l7_req_cnt_per_seconds
                        expr: |
                            (node_flowstats_bpf_l7_req_cnt / scrape_interval_x_1) > 0
                    -   record: node_cpu_utilization
                        expr: |
                            (100 - (avg by(instance, job) (rate(node_cpu_seconds_total{mode="idle"}[scrape_interval_x_3s])) * 100))
                    -   record: node_cpu_aggregated_seconds_total
                        expr: |
                            ((1 - (avg by(instance, job) (rate(node_cpu_seconds_total{mode="idle"}[scrape_interval_x_3s])))) * (count without(cpu, mode, neinstip) (node_cpu_seconds_total{mode="idle"})) * scrape_interval_x_1)
                    -   record: node_disk_read_time_seconds
                        expr: |
                            (rate(node_disk_read_time_seconds_total[scrape_interval_x_3s]) > 0) / (rate(node_disk_reads_completed_total[scrape_interval_x_3s]) > 0)
                    -   record: node_disk_write_time_seconds
                        expr: |
                            (rate(node_disk_write_time_seconds_total[scrape_interval_x_3s]) > 0) / (rate(node_disk_writes_completed_total[scrape_interval_x_3s]) > 0)
                    -   record: node_memory_Utilization
                        expr: |
                            (100 * (1 - ((node_memory_MemFree_bytes + node_memory_Cached_bytes + node_memory_Buffers_bytes) / node_memory_MemTotal_bytes)))
                    -   record: container_cpu_usage_core_total
                        expr: |
                            (sum by(container_label_annotation_kubernetes_io_config_seen, container_label_io_kubernetes_container_name, container_label_io_kubernetes_docker_type, container_label_io_kubernetes_pod_name, container_label_io_kubernetes_pod_namespace, container_label_io_kubernetes_pod_uid, container_label_k8s_app, container_label_pod_template_hash, id, image, instance, job, name) (rate(container_cpu_usage_seconds_total[scrape_interval_x_2s])))
                    -   record: container_spec_cpu_utilization
                        expr: |
                            (sum by(container_label_annotation_kubernetes_io_config_seen, container_label_io_kubernetes_container_name, container_label_io_kubernetes_docker_type, container_label_io_kubernetes_pod_name, container_label_io_kubernetes_pod_namespace, container_label_io_kubernetes_pod_uid, container_label_k8s_app, container_label_pod_template_hash, id, image, instance, job, name) (rate(container_cpu_usage_seconds_total[scrape_interval_x_3s])))
                    -   record: namedprocess_namegroup_cpu_aggregated_seconds_total
                        expr: |
                            (sum by (instance,job,groupname, name, username, pgid, pid, startTime, port) (namedprocess_namegroup_cpu_seconds_total) )
                    -   record: namedprocess_namegroup_aggregated_memory_bytes
                        expr: |
                            (sum without(memtype) (namedprocess_namegroup_memory_bytes{memtype=~"proportionalResident|proportionalSwapped"}))
                    -   record: node_num_core_count
                        expr: |
                            count by(instance, job, name, username, pgid, startTime) (node_cpu_seconds_total{mode=~"system"})
                    -   record: namedprocess_namegroup_thread_cpu_aggregrated_seconds_total
                        expr: |
                            (sum by (instance,job,groupname,threadname, name, username, pgid, pid, startTime, port) (namedprocess_namegroup_thread_cpu_seconds_total))
                    -   record: namedprocess_namegroup_cpu_utilization
                        expr: |
                            (sum by (instance,job,groupname, name, username, pgid, pid, startTime, port) (rate(namedprocess_namegroup_cpu_seconds_total[scrape_interval_x_3s])))
                    -   record: node_flowstats_src_merged_bpf_l7_req_cnt
                        expr: |
                            (node_flowstats_bpf_l7_req_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_cnt{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_req_method_get_cnt
                        expr: |
                            (node_flowstats_bpf_l7_req_method_get_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_method_get_cnt{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_req_method_put_cnt
                        expr: |
                            (node_flowstats_bpf_l7_req_method_put_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_method_put_cnt{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_req_method_other_cnt
                        expr: |
                            (node_flowstats_bpf_l7_req_method_other_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_req_method_other_cnt{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_rsperr_cnt
                        expr: |
                            (node_flowstats_bpf_l7_rsperr_cnt{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_rsperr_cnt{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_rsptime_avg_ms
                        expr: |
                            (node_flowstats_bpf_l7_rsptime_avg_ms{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_rsptime_avg_ms{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_rsptime_max_ms
                        expr: |
                            (node_flowstats_bpf_l7_rsptime_max_ms{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_bpf_l7_rsptime_max_ms{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_bpf_l7_rsptime_min_ms
                        expr: |
                            (node_flowstats_src_merged_bpf_l7_rsptime_min_ms{target_pid!="", source_pid=""})* on (src_ip, dst_ip, dport, url, forward_path_dport, reverse_path_src) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_src_merged_bpf_l7_rsptime_min_ms{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_conntrack_bytes_difference
                        expr: |
                            (node_flowstats_conntrack_bytes_difference{target_pid!="", source_pid=""})* on (forward_path_src, forward_path_dst, forward_path_dport, reverse_path_src, reverse_path_dst, reverse_path_sport) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_conntrack_bytes_difference{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_conntrack_forward_path_bytes_difference
                        expr: |
                            (node_flowstats_conntrack_forward_path_bytes_difference{target_pid!="", source_pid=""})* on (forward_path_src, forward_path_dst, forward_path_dport, reverse_path_src, reverse_path_dst, reverse_path_sport) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_conntrack_forward_path_bytes_difference{source_pid!="",target_pid=""}

                    -   record: node_flowstats_src_merged_conntrack_reverse_path_bytes_difference
                        expr: |
                            (node_flowstats_conntrack_reverse_path_bytes_difference{target_pid!="", source_pid=""})* on (forward_path_src, forward_path_dst, forward_path_dport, reverse_path_src, reverse_path_dst, reverse_path_sport) group_left(source_pid,source_cgroup,source_container_id) node_flowstats_conntrack_reverse_path_bytes_difference{source_pid!="",target_pid=""}

                    -   record: node_disk_utilization
                        expr: |
                            (100 - ((node_filesystem_avail_bytes{mountpoint="/"} * 100) / node_filesystem_size_bytes{mountpoint="/"}))
                    -   record: node_disk_used_bytes
                        expr: |
                            (node_filesystem_size_bytes{mountpoint="/"} - node_filesystem_free_bytes{mountpoint="/"})
                    -   record: http_api_requests_total_count
                        expr: |
                            (sum by (handler,instance,job,method,path,status,provider)(http_api_requests_total))

    labels: {}

    annotations: {}

    tolerations:
      #-   key: node-role.kubernetes.io/<NODE>
      #  effect: NoSchedule

    priorityClassName: ""

    # Persistent volume
    enablePersistent: false
    pvCreate: false
    storageclassCreate: false
    pv:
      name: oc-pv-prometheus
      persistentVolumeReclaimPolicy: Retain
      accessModes: ReadWriteOnce
      hostPath:
        path: "/var/log/prometheus/data"
      capacity:
        storage: 10Gi
    
    pvc:
      name: oc-pvc-prometheus
      accessModes: ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    
    storageClass:
      name: oc-storage-prometheus
      provisioner: kubernetes.io/no-provisioner
      reclaimPolicy: Retain
      allowVolumeExpansion: true
      volumeBindingMode: WaitForFirstConsumer   ## Other option Immediate
      parameters: {}
    
    persistentVolumeMount:
      - name: oc-prometheus-data
        mountPath: /data
        subPath: ""

    persistentVolume:
      - name: oc-prometheus-data
        persistentVolumeClaim:
          claimName: oc-pvc-prometheus

# Docker creds
# dockerCredentials:
#     registry: https://index.docker.io/v1/
#     username: username
#     password: password

##### loki-stack #####
loki-stack:
    # enabled: true
    name: name
    promtail:
        podAnnotations:
            opscruise.prometheus/path: /metrics
            opscruise.prometheus/port: "3101"
            opscruise.prometheus/scheme: http
            opscruise.prometheus/scrape: "true"
        rbac:
            pspEnabled: false
        resources:
            limits:
                cpu: 200m
                memory: 512Mi
            requests:
                cpu: 100m
                memory: 128Mi

    loki:
        rbac:
            pspEnabled: false
        resources:
            limits:
                cpu: 300m
                memory: 4Gi
            requests:
                cpu: 100m
                memory: 512Mi

        config:
            limits_config:
                reject_old_samples_max_age: 24h
            table_manager:
                retention_deletes_enabled:  true
                retention_period: 24h

        affinity: {}

        podAnnotations:
            opscruise.prometheus/path: /metrics
            opscruise.prometheus/port: "3100"
            opscruise.prometheus/scheme: http
            opscruise.prometheus/scrape: "true"

##### jaeger #####
jaeger:
    enabled: false
    collector:
        podAnnotations:
            opscruise.prometheus/path: /metrics
            opscruise.prometheus/port: "9411"
            opscruise.prometheus/scheme: http
            opscruise.prometheus/scrape: "true"
        service:
            zipkin:
                port: 9411
        samplingConfig: |-
            {
                "service_strategies": [
                    {
                        "service": "foo",
                        "type": "probabilistic",
                        "param": 0.8,
                        "operation_strategies": [
                            {
                                "operation": "op2",
                                "type": "probabilistic",
                                "param": 0.4
                            }
                        ]
                    },
                    {
                        "service": "bar",
                        "type": "ratelimiting",
                        "param": 5
                    }
                ],
                "default_strategy": {
                    "type": "probabilistic",
                    "param": 0.5,
                    "operation_strategies": [
                        {
                            "operation": "/health",
                            "type": "probabilistic",
                            "param": 0.0
                        },
                        {
                            "operation": "/metrics",
                            "type": "probabilistic",
                            "param": 0.0
                        },
                        {
                            "operation": "mongodb.isMaster",
                            "type": "probabilistic",
                            "param": 0.0
                        }
                    ]
                }
            }

jaeger-operator:
    enabled: false
    # name: test

##### Prometheus Postgres Exporter #####
prometheus-postgres-exporter:
  enabled: false
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
  service:
    labels: {}
  podLabels:
    opscruisePerimeter: opscruise
  annotations:
    opscruise.prometheus/path: /metrics
    opscruise.prometheus/port: "9187"
    opscruise.prometheus/scheme: http
    opscruise.prometheus/scrape: "true"
  config:
    datasource:
      # Specify one of both datasource or datasourceSecret
      host: "<POSTGRESQL_SERVICENAME.NAMESPACE.svc.cluster.local>"
      user: "postgres_exporter"
      # Only one of password and passwordSecret can be specified
      password: "<POSTGRES_EXPORTER_PASSWORD>"
      # Specify passwordSecret if DB password is stored in secret.
      passwordSecret: {}
      #  name: <Secret name>
      #  key: <Password key inside secret>
      database: 'postgres'
      sslmode: disable
    autoDiscoverDatabases: false
    excludeDatabases: []
    includeDatabases: []

##### Prometheus MongoDB Exporter #####
prometheus-mongodb-exporter:
  enabled: false
#   service:
#     labels:
#       opscruisePerimeter: opscruise
  podLabels:
    opscruisePerimeter: opscruise

  podAnnotations:
    opscruise.prometheus/path: /metrics
    opscruise.prometheus/port: "9216"
    opscruise.prometheus/scheme: http
    opscruise.prometheus/scrape: "true"

  # Only one of mongodb.uri or Secret can be specified
  mongodb:
    uri: "mongodb://${USERNAME}:${PASSWORD}@<SERVICE_NAME.<NAMESPACE>.svc.cluster.local"
  # Name of an externally managed secret (in the same namespace) containing the connection uri as key `mongodb-uri`.
  # If this is provided, the value mongodb.uri is ignored.
  existingSecret:
    name: ""
    key: "mongodb-uri"
  # Port on which mongodb exporter service is exposed
  port: "9216"
  replicas: 1
  serviceMonitor:
    enabled: false
  resources:
    limits:
      cpu: 250m
      memory: 192Mi
    requests:
      cpu: 100m
      memory: 128Mi

##### Kafka Exporter #####
kafka-exporter:
  enabled: false
  replicaCount: 1
  podLabels:
    opscruisePerimeter: opscruise
  image:
    repository: danielqsj/kafka-exporter
    tag: v1.6.0
    pullPolicy: IfNotPresent

  prometheus_scrape_config:
    path: /metrics
    port: "{{ .Values.containerport }}"
    scheme: http
    scrape: "true"

  containerport: 9308
  service:
    type: ClusterIP
    port: 9308
    # labels:
    #   opscruisePerimeter: opscruise

  annotations: {}

##### Prometheus MYSQL Exporter #####
prometheus-mysql-exporter:
  enabled: false
  podLabels:
    opscruisePerimeter: opscruise
  annotations:
    opscruise.prometheus/path: /metrics
    opscruise.prometheus/port: "9104"
    opscruise.prometheus/scheme: http
    opscruise.prometheus/scrape: "true"
#   service:
#     labels:
#       opscruisePerimeter: opscruise
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
  image:
    repository: "prom/mysqld-exporter"
    tag: "v0.12.1"
    pullPolicy: "IfNotPresent"
  replicaCount: 1
  mysql:
    db: "<DB_NAME>"
    host: "<MYSQL_SERVICE>.<NAMESPACE>.svc.cluster.local"
    param: ""
    # If "existingPasswordSecret" is specified, "pass" can be ignored
    pass: ""
    port: 3306
    user: "mysql_exporter"
    # If "pass" is specified, "existingPasswordSecret" can be ignored
    existingPasswordSecret:
      name: ""
      key: ""

##### x509 Certificate Exporter #####
x509-certificate-exporter:
  enabled: false
  podExtraLabels:
    opscruisePerimeter: opscruise
  service:
    create: false
  secretsExporter:
    enabled: false
    secretTypes:
    - type: kubernetes.io/tls
      key: tls.crt
  prometheusServiceMonitor:
    create: false
  prometheusPodMonitor:
    create: false
  prometheusRules:
    create: false
  hostPathsExporter:
    daemonSets:
      master:
        nodeSelector:
          node-role.kubernetes.io/master: ""
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        watchFiles:
        - /var/lib/kubelet/pki/kubelet-client-current.pem
        - /etc/kubernetes/pki/apiserver.crt
        - /etc/kubernetes/pki/apiserver-etcd-client.crt
        - /etc/kubernetes/pki/apiserver-kubelet-client.crt
        - /etc/kubernetes/pki/ca.crt
        - /etc/kubernetes/pki/front-proxy-ca.crt
        - /etc/kubernetes/pki/front-proxy-client.crt
        - /etc/kubernetes/pki/etcd/ca.crt
        - /etc/kubernetes/pki/etcd/healthcheck-client.crt
        - /etc/kubernetes/pki/etcd/peer.crt
        - /etc/kubernetes/pki/etcd/server.crt
        watchKubeconfFiles:
        - /etc/kubernetes/admin.conf
        - /etc/kubernetes/controller-manager.conf
        - /etc/kubernetes/scheduler.conf
      nodes:
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/ingress
          operator: Exists
        watchFiles:
        - /var/lib/kubelet/pki/kubelet-client-current.pem
        - /etc/kubernetes/pki/ca.crt

##### InfluxDB Exporter #####
influxdb-exporter:
  enabled: false
  # Options for "endpoint_type"
  # common_dns: If InfluxDB is running within cluster but different namespace/externally on a VM and is accessible with DNS
  # external_ip: If InfluxDB is running externally on a VM and is accessible with IP address only
  endpoint_type: "dns_name"
  # If "endpoint_type" is common_dns, provide DNS_NAME and PORT below
  common_dns_name: "influx-service.influx.svc.cluster.local"
  common_dns_port: "80"
  # If "endpoint_type" is external_ip, provide IP_ADDRESS and PORT below
  external_ip_address: "1.2.3.4"
  external_ip_port: "8086"

  prometheus_scrape_config:
    path: /metrics
    port: "{{ .Values.ports.external_ip_port }}"
    scheme: http
    scrape: "true"

  serviceLabels: {}
  annotations: {}

##### Prometheus Redis Exporter #####
prometheus-redis-exporter:
  enabled: false
  image:
    repository: oliver006/redis_exporter
    tag: v1.44.0
    pullPolicy: IfNotPresent
  labels:
    opscruisePerimeter: opscruise
#   service:
#     labels:
#       opscruisePerimeter: opscruise
  annotations:
    opscruise.prometheus/path: /metrics
    opscruise.prometheus/port: "9121"
    opscruise.prometheus/scheme: http
    opscruise.prometheus/scrape: "true"

##### Fluent-Bit Integration #####
fluent-bit:
  enabled: false
  image:
    repository: cr.fluentbit.io/fluent/fluent-bit
    tag: "1.9.4"
    pullPolicy: IfNotPresent

  podAnnotations:
    opscruise.prometheus/path: /metrics
    opscruise.prometheus/port: "2020"
    opscruise.prometheus/scheme: http
    opscruise.prometheus/scrape: "true"

  extraVolumes: []

  extraVolumeMounts: []

  config:
    service: |
      [SERVICE]
          HTTP_Server    On
          HTTP_Listen    0.0.0.0
          HTTP_PORT      2020
          Flush          1
          Daemon         Off
          Log_Level      error
          Parsers_File   parsers.conf
    inputs: |
      [INPUT]
          Name           tail
          Tag            kube.*
          Path           /var/log/containers/*.log
          Parser         docker
          Mem_Buf_Limit  10MB
          Path_key       filename
    filters: |
      [FILTER]
          Name           kubernetes
          Match          kube.*
          Kube_URL       https://kubernetes.default.svc:443
          Merge_Log On
          K8S-Logging.Exclude Off
          K8S-Logging.Parser Off
    outputs: |
      [Output]
          Name loki
          Match *
          host opscruise-bundle-loki
          port 3100
          tenant_id ""
          labels logging_agent="fluent-bit", filename=$filename, stream=$stream, namespace=$kubernetes['namespace_name'], image=$kubernetes['container_image'], container=$kubernetes['container_name'], host=$kubernetes['node'], app=$kubernetes['labels']['app'], app=$kubernetes['labels']['k8s-app'], opscruiseGroup=$kubernetes['labels']['opscruiseGroup'], opscruisePerimeter=$kubernetes['labels']['opscruisePerimeter'], opscruiseProduct=$kubernetes['labels']['opscruiseProduct'], opscruiseStream=$kubernetes['labels']['opscruiseStream'], pod_template_generation=$kubernetes['labels']['pod-template-generation'], release=$kubernetes['labels']['release'], pod=$kubernetes['pod_name']
          remove_keys stream,filename,kubernetes,time
          auto_kubernetes_labels off
          line_format json
    customParsers: |
      [PARSER]
          Name        docker
          Format      json
          Time_Key    time
          Time_Format %Y-%m-%dT%H:%M:%S.%L

##### prometheus-yace-exporter #####
prometheus-yace-exporter:
    podAnnotations:
        opscruise.prometheus/path: /metrics
        opscruise.prometheus/port: "5000"
        opscruise.prometheus/scheme: http
        opscruise.prometheus/scrape: "true"

    enabled: false
    image:
        # repository: quay.io/invisionag/yet-another-cloudwatch-exporter  //old
        repository: ghcr.io/nerdswords/yet-another-cloudwatch-exporter
        tag: v0.40.0-alpha
        pullPolicy: IfNotPresent
    service:
        labels: {}
    podLabels:
        opscruisePerimeter: opscruise
    aws:
        secret:
            name: "oc-aws-credential"
    config: |-
        apiVersion: v1alpha1
        sts-endpoint: ap-south-1
        discovery:
            exportedTagsOnMetrics:
                rds:
                - Name
                - client
                ec:
                - Name
                - client
            jobs:
            # Redis
            -   regions:
                -   us-east-1
                type: ec
                searchTags:
                -   key: opscruise
                    value: .*true.*
                metrics:
                -   name: ActiveDefragHits
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: AuthenticationFailures
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: BytesUsedForCache
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: BytesReadFromDisk
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: BytesWrittenToDisk
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CacheHits
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CacheMisses
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CommandAuthorizationFailures
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CacheHitRate
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CurrConnections
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CurrItems
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CurrVolatileItems
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: DatabaseMemoryUsagePercentage
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: DatabaseMemoryUsageCountedForEvictPercentage
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: DB0AverageTTL
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: EngineCPUUtilization
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: Evictions
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: GlobalDatastoreReplicationLag
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: KeyAuthorizationFailures
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: KeysTracked
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: MemoryFragmentationRatio
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: NewConnections
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: NumItemsReadFromDisk
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: NumItemsWrittenToDisk
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: Reclaimed
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: ReplicationBytes
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: ReplicationLag
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CPUCreditBalance
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CPUCreditUsage
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: FreeableMemory
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: NetworkBytesIn
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: NetworkBytesOut
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: NetworkPacketsIn
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: NetworkPacketsOut
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: SwapUsage
                    statistics:
                    -   Average
                    period: 300
                    length: 300
            -   regions:
                -   us-east-1
                type: "rds"
                searchTags:
                -   key: opscruise
                    value: .*true.*
                additionalDimensions:
                -   name: AccountId
                    value: accountId
                metrics:
                -   name: CPUCreditUsage
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CPUCreditBalance
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CPUSurplusCreditBalance
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CPUSurplusCreditsCharged
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: CPUUtilization
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: DiskReadOps
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: DiskWriteOps
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: DiskReadBytes
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: DiskWriteBytes
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: NetworkIn
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: NetworkOut
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: NetworkPacketsIn
                    statistics:
                    -   Average
                    period: 300
                    length: 300
                -   name: NetworkPacketsOut
                    statistics:
                    -   Average
                    period: 300
                    length: 300

# cert creds, To use the new server.cer.pem file, use the below command along with upgrade command
# --set-file certCreds.file=/path/to/server.cer.pem
certCreds:
    file: server.cer.pem

##### Nginx Prometheus Exporter #####
nginx-prometheus-exporter:
  enabled: false
  replicaCount: 1
  podLabels:
    opscruisePerimeter: opscruise
  image:
    repository: nginx/nginx-prometheus-exporter
    tag: 0.11.0
    pullPolicy: IfNotPresent
  args:
    - -nginx.scrape-uri=http://127.0.0.1:50000/stub_status

  prometheus_scrape_config:
    path: /metrics
    port: "{{ .Values.containerport }}"
    scheme: http
    scrape: "true"
  containerport: 9113
  service:
    type: ClusterIP
    port: 9113
    labels: {}

##### Trace Router #####
trace-router:
    enabled: false

    serviceAccountName: trace-router-service-account

    replicas: 1

    image:
        repository: opscruiseindia/oc-trace-router
        trace_router_tag: rel36.1.0
        pullPolicy: IfNotPresent

    imagePullSecrets:
        name: oc-docker-creds

    restartPolicy: Always
    schedulerName: default-scheduler
    terminationGracePeriodSeconds: 30

    service:
        app: trace-router
        name: trace-router-service
        opscruiseGroup: gateways
        opscruiseProduct: trace-router
        opscruiseStream: opscruise
        protocol: TCP
        portName: grpc
        port: 9001
        targetPort: 9001

    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    dnsPolicy: ClusterFirst

    resources:
        limits:
            cpu: 500m
            memory: 3Gi
        requests:
            cpu: 100m
            memory: 128Mi

    envFrom:
        -   configMapRef:
                name: trace-router-env-config
        -   secretRef:
                name: jgateway-secret

    volumeMounts:
        -   mountPath: /etc/ssl/certs/tracegw-cert.pem
            name: tracegw-cert
            subPath: tracegw-cert.pem
        -   mountPath: /opt/opscruise/configs/traceRouteEndpoint.json
            name: trace-router-routes-config
            subPath: traceRouteEndpoint.json

    volumes:
        -   name: tracegw-cert
            secret:
                secretName: oc-gw-certs
        -   name: trace-router-routes-config
            configMap:
                name: trace-router-routes-config

    configMap:
        traceRouteEndpoints:
        -   key:    deployment.environment
            value:  opscruise-dev6
            endpoint:   "localhost:9000"
        envConfig:
            quarkus.grpc.server.port: "9001"
            quarkus.grpc.server.enable-reflection-service: "true"
            quarkus.grpc.server.plain-text: "true"
            tracerouter.initial-delay-secs: "60"
            tracerouter.sample-interval-secs: "30"
            tracerouter.trace-completion-wait-time-secs: "120"
            tracerouter.default-endpoint: "tracegw-service.opscruise.svc.cluster.local:8000"
            quarkus.log.level: "INFO"
            tracerouter.endpoint-routes-json: "/opt/opscruise/configs/traceRouteEndpoint.json"
            
    labels: {}

    annotations: {}

    tolerations:

    priorityClassName: ""

    affinity: {}
